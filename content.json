{"meta":{"title":"Venson","subtitle":"","description":"When you can’t find the sunshine, be the sunshine.","author":"Guo Wensheng","url":"http://guowensheng.com","root":"/"},"pages":[{"title":"Categories","date":"2020-02-25T14:31:35.000Z","updated":"2020-02-26T15:04:44.228Z","comments":false,"path":"categories/index.html","permalink":"http://guowensheng.com/categories/index.html","excerpt":"","text":""},{"title":"About","date":"2020-02-25T14:32:16.000Z","updated":"2020-03-04T13:24:46.824Z","comments":false,"path":"about/index.html","permalink":"http://guowensheng.com/about/index.html","excerpt":"name = Guo Wensheng id = venson999 email = venson999@126.com location = Tianjin, China","text":"name &#x3D; Guo Wenshengid &#x3D; venson999email &#x3D; venson999@126.comlocation &#x3D; Tianjin, China"},{"title":"Tags","date":"2020-02-25T14:32:01.000Z","updated":"2020-02-26T15:04:50.176Z","comments":false,"path":"tags/index.html","permalink":"http://guowensheng.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"2020年总结","slug":"2021-02-15-2020-year-summary","date":"2021-02-15T08:43:33.000Z","updated":"2021-02-15T08:43:48.959Z","comments":true,"path":"posts/2021-02-15-2020-year-summary/","link":"","permalink":"http://guowensheng.com/posts/2021-02-15-2020-year-summary/","excerpt":"新冠疫情竟然持续了一年，到现在还没有结束得迹象，好想出去旅游啊！ 上半年刚连考完那阵，由于没啥事干，整个人都松弛了下来，再加上考试发挥得不好，干啥的心情也没有，痛痛快快地当了一段时间咸鱼。现在还记得下分那天的情景，怀着忐忑的心情打开查分网站，输入个人信息，点击查询，202分，过了！高兴得从座位上跳了起来，兴奋得在家里跑来跑去，大喊大叫，好久没有这么高兴了，真的好久了。冷静下来知后，又查了一遍，确实是我本人没错了，安心了。后面就风风火火地准备复试了。疫情中的复试过程也挺难忘的，在家远程面试，两个机位一前一后照着，对着电脑进行问答，发挥得不好。虽然英语笔试成绩奇迹般的达到了78分的免修线，但是复试时的口语简直是个渣渣，听得懂，说不出来，难受得很。管理问题问了OKR跟KPI的区别，没说明白。问我","text":"新冠疫情竟然持续了一年，到现在还没有结束得迹象，好想出去旅游啊！ 上半年刚连考完那阵，由于没啥事干，整个人都松弛了下来，再加上考试发挥得不好，干啥的心情也没有，痛痛快快地当了一段时间咸鱼。现在还记得下分那天的情景，怀着忐忑的心情打开查分网站，输入个人信息，点击查询，202分，过了！高兴得从座位上跳了起来，兴奋得在家里跑来跑去，大喊大叫，好久没有这么高兴了，真的好久了。冷静下来知后，又查了一遍，确实是我本人没错了，安心了。后面就风风火火地准备复试了。疫情中的复试过程也挺难忘的，在家远程面试，两个机位一前一后照着，对着电脑进行问答，发挥得不好。虽然英语笔试成绩奇迹般的达到了78分的免修线，但是复试时的口语简直是个渣渣，听得懂，说不出来，难受得很。管理问题问了OKR跟KPI的区别，没说明白。问我为啥喜欢投资，也没答出彩。不过都不要紧，不影响结果，因为整个复试只淘汰一个人，呵呵。 下半年是忙碌的，开学之后所有的周末都用来上课了，连闹表都取消了跳过节假日的设定。下半年是充实的，一个班50多个人，周末连上两个整天的课，大家一起学习一起玩耍，仿佛又找回了高中时的感觉。说起上课，就不得不提一下老师们了，真是风格迥异，有作业狂人，有段子高手，还有催眠大师。学习效果自然也是各有不同。留作业最多的老师评价最好。上课以段子为主，考试时甩出一叠复习资料自学的老师，我只能深表遗憾。至于催眠的老师，课程、考试、老师本人，都已经没啥印象了，不提也罢。反正最后总结出一个经验，老师讲完课后的一周时间里一定要自己再看书复习一下，不能指着考试之前突击，太痛苦了。 健身这件事坚持了下来，也产生了积极正面的效果。由于腿部肌肉的恢复，膝盖已经没有大碍了。篮球和足球都捡了起来，全场飞奔大气都不喘的感觉，太棒了。形体上也有了些许的改变，虽然肌肉量还是不足，还没到可以显摆的地步，但是自己欣赏一下也足够开心了。现在跟教练，还能坚持，等后面孩子上学去和平住的时候，可能就要自己去健身房练了，希望也能坚持下来。健身我要把它当作一件正经事来对待。 这一年看上去挺忙的，实际上还是有很多闲工夫的，由于考试上学的原因，这两年都没怎么好好读书。没法出去旅游，还是得把读书给拾起来，身体和心灵得有一个在路上。","categories":[{"name":"总结","slug":"总结","permalink":"http://guowensheng.com/categories/%E6%80%BB%E7%BB%93/"}],"tags":[{"name":"年终总结","slug":"年终总结","permalink":"http://guowensheng.com/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"}]},{"title":"2020年书单","slug":"2021-02-15-2020-year-book-list","date":"2021-02-15T07:10:05.000Z","updated":"2021-02-15T08:50:39.256Z","comments":true,"path":"posts/2021-02-15-2020-year-book-list/","link":"","permalink":"http://guowensheng.com/posts/2021-02-15-2020-year-book-list/","excerpt":"MBA教材，财务会计入门。 MBA教材，俗称运筹学，托了老师留作业的福，学的还算明白。 MBA教材，人事，讲了好多，又好像啥也没讲，没啥收获。 MBA教材，经济学在企业管理中的应用，借着复习考试，还算学了点东西。 MBA教材，没啥说的，中国牛逼。 果然人类还是一台生化机器，从生理和心里方面介绍如何自控，了解原理，活得明白。","text":"MBA教材，财务会计入门。 MBA教材，俗称运筹学，托了老师留作业的福，学的还算明白。 MBA教材，人事，讲了好多，又好像啥也没讲，没啥收获。 MBA教材，经济学在企业管理中的应用，借着复习考试，还算学了点东西。 MBA教材，没啥说的，中国牛逼。 果然人类还是一台生化机器，从生理和心里方面介绍如何自控，了解原理，活得明白。","categories":[{"name":"阅读","slug":"阅读","permalink":"http://guowensheng.com/categories/%E9%98%85%E8%AF%BB/"}],"tags":[{"name":"书单","slug":"书单","permalink":"http://guowensheng.com/tags/%E4%B9%A6%E5%8D%95/"}]},{"title":"读书笔记之《企业生命周期》","slug":"2020-08-19-reading-notes-of-managing-corporate-lifecycles","date":"2020-08-19T07:00:32.000Z","updated":"2021-02-15T06:07:49.271Z","comments":true,"path":"posts/2020-08-19-reading-notes-of-managing-corporate-lifecycles/","link":"","permalink":"http://guowensheng.com/posts/2020-08-19-reading-notes-of-managing-corporate-lifecycles/","excerpt":"数数工作已经十几年了，总共经历了两份工作，非常幸运的是这两份工作都是企业创业初期加入的，作为一名员工与企业一起共同经历了成长。就像人的成长会遇到各种烦恼一样，企业的成长也会遇到各种各样的问题，当时身处其中并没有深入思考这些问题的原因以及解决办法，更不用说对它们进行归纳总结了。 《企业生命周期》这本书给了我一个全新的视角，提出了企业生命周期理论，作者把企业比作人，与成长需要的过程类似，都需要经历孕育期、婴儿期、学步期、青春期、壮年期、稳定期、贵族期和死亡，可归纳总结为四个阶段，创业、成长、成熟和衰退。本书第一篇描述了一个典型的组织生命周期过程，在生命周期阶段的典型行为，以及组织在这个过程中遇到的正常问题和异常问题。以前一直认为凡是问题都是不正常的，但这里作者把成长过程中的问题分为正常和异常两","text":"数数工作已经十几年了，总共经历了两份工作，非常幸运的是这两份工作都是企业创业初期加入的，作为一名员工与企业一起共同经历了成长。就像人的成长会遇到各种烦恼一样，企业的成长也会遇到各种各样的问题，当时身处其中并没有深入思考这些问题的原因以及解决办法，更不用说对它们进行归纳总结了。 《企业生命周期》这本书给了我一个全新的视角，提出了企业生命周期理论，作者把企业比作人，与成长需要的过程类似，都需要经历孕育期、婴儿期、学步期、青春期、壮年期、稳定期、贵族期和死亡，可归纳总结为四个阶段，创业、成长、成熟和衰退。本书第一篇描述了一个典型的组织生命周期过程，在生命周期阶段的典型行为，以及组织在这个过程中遇到的正常问题和异常问题。以前一直认为凡是问题都是不正常的，但这里作者把成长过程中的问题分为正常和异常两种。正常问题即成长的烦恼，任何企业在成长过程中或多或少都会遇到，不必过于敏感和担心。第二篇提供了PAEI和CAPI的思维框架，把企业生命周期放在框架中思考，通过描述PAEI四要素在各阶段的变化情况，提供了解释公司为什么会从增长走向衰老的分析工具。第三篇用生命周期理论告诉我们如何培养健康的企业，描述公司如何沿着最优、更快道路前进的指导原则。 整本书看下来，好像打开了一扇新世界的大门，让我在今后的工作中可以通过企业生命周期理论理解问题，用PAEI和CAPI框架来分析和解决问题，多了一种思路，多了更多办法，受益良多。","categories":[{"name":"阅读","slug":"阅读","permalink":"http://guowensheng.com/categories/%E9%98%85%E8%AF%BB/"}],"tags":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://guowensheng.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"}]},{"title":"教育之我见","slug":"2020-03-15-my-opinion-on-education","date":"2020-03-15T08:20:27.000Z","updated":"2020-03-25T05:33:53.325Z","comments":true,"path":"posts/2020-03-15-my-opinion-on-education/","link":"","permalink":"http://guowensheng.com/posts/2020-03-15-my-opinion-on-education/","excerpt":"效率低下 去年一年都在考试，自学网课比较多，除了疑难问题交流不方便以外，没感觉什么特别的障碍，大部分时间反而感觉很方便。一方面，网课时间地点都比较灵活。另一方面，视频可以倍速播放，简单易懂的可以2倍速看，不好理解的可以1倍速反复看。从老师的角度也是一样的，只需要录制一次课程，不用再翻来覆去重复相同的内容，可以腾出更多时间打磨课程本身以及和学生们交流。 回想起我们从小到大在学校的学习过程，老师们年复一年的重复讲解着相同的知识，同学们在课上稍不留神就可能导致完全跟不上节奏。另一方面，优秀的教师资源是极其有限的，为什么不能通过视频课程的方式，让更多的学生聆听更好的课程呢？试想，就这么一点点授课方式的改变，可以给我们的教育系统带来多么大的效率提升。在新冠肺炎肺疫情的当下，全国的老师和同学们都已经在","text":"效率低下去年一年都在考试，自学网课比较多，除了疑难问题交流不方便以外，没感觉什么特别的障碍，大部分时间反而感觉很方便。一方面，网课时间地点都比较灵活。另一方面，视频可以倍速播放，简单易懂的可以2倍速看，不好理解的可以1倍速反复看。从老师的角度也是一样的，只需要录制一次课程，不用再翻来覆去重复相同的内容，可以腾出更多时间打磨课程本身以及和学生们交流。 回想起我们从小到大在学校的学习过程，老师们年复一年的重复讲解着相同的知识，同学们在课上稍不留神就可能导致完全跟不上节奏。另一方面，优秀的教师资源是极其有限的，为什么不能通过视频课程的方式，让更多的学生聆听更好的课程呢？试想，就这么一点点授课方式的改变，可以给我们的教育系统带来多么大的效率提升。在新冠肺炎肺疫情的当下，全国的老师和同学们都已经在上网课了，相信他们会有更深刻的体会。其实改变只是需要一个契机，为什么不试试看呢？ 因材施教人生来就有差异，这种差异是由基因决定的，在教育这件事上最直接的影响就是智商的差异。同时每个人的家庭状况也有不同，在0到6岁这段所谓学前教育期间打下的基础更是天差地别。狭义上来讲，所谓因材施教的材就可以认为是这些差异。现在我们的教育粗暴的无视了这些差异，而去强调平等。不能搞入学考试，不能搞排名，不能按成绩分班，这些对于小孩子来说确实有些残酷，但是我们的社会不是比这要残酷一百倍吗？优胜劣汰弱肉强食，这些不正是我们社会的基本规律吗？有些事情还是越早明白越好。 一个班里学生水平通常参差不齐，简单可以分为上中下三等，坐在同一间教室里上课，老师只能按照中等生的水平讲课。这样带来的问题就是，下等生听不懂，上等生不爱听。在留作业和考试的时候也是一样。学习要想效果好，必须形成正确的多巴胺反馈回路，简单来说就是，上课听的懂，作业都会做，考试得高分，如此循环，这样学生才愿意去学习。现在的教育制度下，只有上等生才能形成这样的回路，其他人只能越来越没动力。 教育就应该是差异化的，把相同水平的人放在一起，把不同水平的人分开，然后针对这些差异分配教育资源、设计课程、布置作业、进行考试。这样所有人都能上课听的懂，作业都会做，考试得高分，从而形成正确的多巴胺反馈回路。把网课改革省下来的精力放在差异化教育上，老师好教，学生爱学，何乐而不为呢？ 责任分工现在学校一直在强调给学生减负，减了半天，学生的负担一点没少，家长的负担倒是与日俱增。网络上流传着很多家长给孩子辅导作业的搞笑视频，哈哈一笑之余，其中确实反映了一些问题。学校就是学知识的地方，在学校学不明白，回家让家长辅导，美其名曰让家长参与到孩子的成长之中，这么个大帽子就这样被迫带上了。为了减负，学校让孩子早放学，可公司却不让家长早下班，那接孩子怎么办呢？要么给孩子找托管班解决早放学和晚饭的问题，要么重担就落到了老人的身上。孩子校外的时间多了，家长又不会教，只能求助于社会教育机构，又是一笔可观的花销。学校把教育的责任无脑推给家长，这样到底解决了谁的问题？ 教育要符合国情，发达国家搞快乐教育，那是因为人家经济状况允许，一个家长在家全职带孩子，岂不是想怎么折腾都行。像我们现在这样，家长太累，学校也不省心，孩子能学成什么样最后还得靠自己。关于教育的责任，我心中的分工是，国家提供优秀的教育环境，学校负责智商，家长负责情商，三方良性共振，一起带着孩子们起飞，岂不美哉？ 最后教育是门大学问，我一介草民，观点难免有失偏颇，但还是希望现状能有所改变，越来越好。","categories":[{"name":"思考","slug":"思考","permalink":"http://guowensheng.com/categories/%E6%80%9D%E8%80%83/"}],"tags":[{"name":"生活","slug":"生活","permalink":"http://guowensheng.com/tags/%E7%94%9F%E6%B4%BB/"},{"name":"社会","slug":"社会","permalink":"http://guowensheng.com/tags/%E7%A4%BE%E4%BC%9A/"},{"name":"教育","slug":"教育","permalink":"http://guowensheng.com/tags/%E6%95%99%E8%82%B2/"}]},{"title":"2019年书单","slug":"2020-02-01-2019-year-book-list","date":"2020-02-01T07:54:02.000Z","updated":"2020-03-20T13:09:26.925Z","comments":true,"path":"posts/2020-02-01-2019-year-book-list/","link":"","permalink":"http://guowensheng.com/posts/2020-02-01-2019-year-book-list/","excerpt":"PMP官方教材，有用。 MBA大师全套备考资料，不想再看。","text":"PMP官方教材，有用。 MBA大师全套备考资料，不想再看。","categories":[{"name":"阅读","slug":"阅读","permalink":"http://guowensheng.com/categories/%E9%98%85%E8%AF%BB/"}],"tags":[{"name":"书单","slug":"书单","permalink":"http://guowensheng.com/tags/%E4%B9%A6%E5%8D%95/"}]},{"title":"2019年总结","slug":"2020-01-31-2019-year-summary","date":"2020-01-31T12:46:49.000Z","updated":"2020-03-25T05:33:53.431Z","comments":true,"path":"posts/2020-01-31-2019-year-summary/","link":"","permalink":"http://guowensheng.com/posts/2020-01-31-2019-year-summary/","excerpt":"今年主题就是考试，上半年考PMP，下半年考MBA。长期的碎片化信息获取习惯，已经把人们的注意力撕得四分五裂，根本没办法专注于某事，更不用说到长时间深入学习了。所以这是异常痛苦与充实的一年。 提起为什么要考PMP？还是个挺有意思的决定。由于部门发展到了一定阶段，团队的成长不尽如人意，于是只能求助于PMP考试这个大俗套，所以决定选派部门骨干参加考试。我本来是不想参与的，主要是觉得PMP对自己没什么大用处。后来转念一想，如果部门骨干学成归来以后张口闭口都是PMP，自己接不上来的话，岂不是很没面子？随即决定还是跟大家一起学学吧。起初学习PMP的时候是异常痛苦的，被自己涣散的注意力惊呆了，学习效率低得令人发指。还好报了个培训机构，跟着人家的指导按部就班的慢慢学习，最终取得了不错的成绩。看似无心插柳的","text":"今年主题就是考试，上半年考PMP，下半年考MBA。长期的碎片化信息获取习惯，已经把人们的注意力撕得四分五裂，根本没办法专注于某事，更不用说到长时间深入学习了。所以这是异常痛苦与充实的一年。 提起为什么要考PMP？还是个挺有意思的决定。由于部门发展到了一定阶段，团队的成长不尽如人意，于是只能求助于PMP考试这个大俗套，所以决定选派部门骨干参加考试。我本来是不想参与的，主要是觉得PMP对自己没什么大用处。后来转念一想，如果部门骨干学成归来以后张口闭口都是PMP，自己接不上来的话，岂不是很没面子？随即决定还是跟大家一起学学吧。起初学习PMP的时候是异常痛苦的，被自己涣散的注意力惊呆了，学习效率低得令人发指。还好报了个培训机构，跟着人家的指导按部就班的慢慢学习，最终取得了不错的成绩。看似无心插柳的一个决定，却好像打开了新世界的大门，让我找回了阔别已久的学习的感觉，真正的专注的高效的深入的学习的感觉，区别于浅尝辄止的碎片化的互联网式的学习的感觉，太棒了。然后必须给PMP正一下名，大俗套是真的有用，在后面的工作中帮我解决了不少问题，赞。 提起为什么要考MBA？也是个挺有意思的决定。由于经历了上半年的洗礼，刚刚考完PMP的我还处于意犹未尽的状态，怎能甘心在下半年的时间里做一条咸鱼？于是考研这个处于个人长期规划列表里的选项被实验性的提上了日程。先查查怎么考再说，12月份考试，转年9月份入学，这要是明年再考的话，得等后年9月份才能入学，被如此漫长的时间跨度惊出了一身冷汗。掐指一算，距离12月考试还有半年时间，貌似时间还够用。于是乎找了家培训机构简单咨询了一下，把钱一交，便上了考研这条船。整个备考的过程更是异常的煎熬。刷题背单词背作文，遥想当年高考都没有这样用功过。而且越到考前越是各种焦虑，中间还夹杂着我有生以来最严重的一场胃病，这个后面再表。遗憾的是最终考试没有发挥好，时间不够题目没做完，自然也就没心情估分，到底能不能过线现在还悬着呢。希望能有个好结果，再让我考一年的话，呃，真的不敢想。 在这必须得说一下我的胃病了，反流性食管炎，折磨我已经大半年了，整个人瘦了十几斤，关键是现在还没好。一开始可能只是器质性的，伴随着工作以及备考的巨大压力，现在可能已经变成功能性的了。也就是说一开始是食管上的问题导致生理上的症状，后来就变成心理上的问题导致生理上的症状了。最有意思的是，在天津吃药都不好，出去玩不吃药都没事。从中悟出一个道理，健康和快乐才是最重要的，其他都是浮云。希望快点好起来吧。 今年最大的收获并不是参加了什么考试或者得到了什么证书，今年最大的收获是执行力，PMP说考就考，MBA说干就干。成功撕下了自己多年诸如“懒癌晚期”、“拖延症患者”之类的标签，发现自己也可以是一个雷厉风行的人。在这种强烈的自我意识驱动下，后面又顺利的拿下了香港银行账户。看着自己的短期和长期目标一个一个被勾掉，就好像手机上绝不能有小红点提示一样，只是维度从手机上升到了人生，心情异常的舒畅。 今年想明白了一件事情，人的命天注定。为什么马云那么成功，你却啥也不是？因为在人类发展的长河中，注定需要一个类似于马云的人出现，时间地点姓名甚至性别都可能有所偏差，但是这件事一定会发生，发生在谁身上是一个概率问题，在我们这个宇宙中，这件事情恰好发生在了马云身上，而不是你，就这么简单。同样，为什么有的人明明生活习惯很好，却偏偏得癌症死了。癌症是什么，是基因突变，基因突变也是一个概率问题，跟生活习惯关系不大。这世界注定会有一些人因为癌症死去，就看谁赶上了。所以古人有云，“胜不骄，败不馁”、“生的伟大，死的光荣”，简直是至理名言，因为无论胜败还是生死这都是命运的安排啊。那么，既然命运都安排好了，我们生存的意义在于什么，我们为什么要努力呢？我们生存是因为我们想生存，我们努力是因为我们想努力，我们做任何事情只是因为我们想去做，不需要别的理由，至于结果如何，那都是命运的安排。还等什么，还不想干点啥干点啥去，谁知道下一秒命运会怎么安排你。 护肤对于一个直男来说总有一种羞羞的感觉，但是管不了那么多，比起面子，脸更重要。今年脸上一度起了很多小红疙瘩，起初以为是过敏，经过各种忌口却不起作用，最后无奈求助美容院，对，没错，就是美容院。我一个大男人去美容院，能想象出是有多么尬吗，实在是没辙了。因为在医院这根本不叫病，没有人会关心你的感受，更不用说好好给你治疗了。虽然美容院学费挺贵，但结果还是可以接受的，至少知道了自己是干性皮肤，知道了保湿防晒的重要性，知道了小红疙瘩是敏感造成的。经过一番针对性养护，症状得到明显改善，还要啥自行车。 年底正式开始健身了，什么叫正式，就是请教练交学费那种。体验了两次就把我媳妇也拉上了，她竟然真的入坑了，总算找到一件共同的事情，不容易。嗯，明年写总结的时候应该已经练成彭于晏了，哈哈。 最后不得不提一下这次的冠状病毒肺炎疫情，全国上下齐心协力抗击疫情，再次体现出中国特色社会主义制度的优越性，感觉棒棒的。对于个人来说最深切的体会还是强行在家宅了整个春节假期，切切实实的体验了一把三口之家的居家生活，整天就是做饭、吃饭、洗碗、陪孩子玩、睡觉，感觉挺温馨。 2019年走出了点触底反弹的感觉，2020加油！","categories":[{"name":"总结","slug":"总结","permalink":"http://guowensheng.com/categories/%E6%80%BB%E7%BB%93/"}],"tags":[{"name":"年终总结","slug":"年终总结","permalink":"http://guowensheng.com/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"}]},{"title":"2018年总结","slug":"2019-02-05-2019-year-summary","date":"2019-02-04T16:12:03.000Z","updated":"2020-03-20T13:09:26.924Z","comments":true,"path":"posts/2019-02-05-2019-year-summary/","link":"","permalink":"http://guowensheng.com/posts/2019-02-05-2019-year-summary/","excerpt":"今年这张图解开了我多年的困惑，为什么总是不开心，因为身处绝望之谷还一无所知，未知的敌人才是最可怕的。现在不仅知道了问题所在，还指明了前进的方向，虽然还没有具体的方法，但只要坚持不懈，总会走出去的。如何成为一个有智慧的人，现阶段除了看书，好像没有更好的办法了。虽然这些年一直坚持在看书，但是没啥方向性，如果好好计划一下，应该会有效果，试试吧。 自从跟了长赢计划，开始对投资无限感兴趣，进而开始学习一些经济学原理，还没入门。虽然没几个钱，目前跟的计划还是浮亏，但是很开心，而且充满希望。A股这个大底能否让我实现人生巅峰，就看这一波了，手动狗头。有人说，没钱，投个屁资，先老老实实上班赚钱再说。对，也不全对。班是必须好好上的，因为工资是最稳定的现金流，是财富积累的基础。与此同时，如果在不占用过多精力的基","text":"今年这张图解开了我多年的困惑，为什么总是不开心，因为身处绝望之谷还一无所知，未知的敌人才是最可怕的。现在不仅知道了问题所在，还指明了前进的方向，虽然还没有具体的方法，但只要坚持不懈，总会走出去的。如何成为一个有智慧的人，现阶段除了看书，好像没有更好的办法了。虽然这些年一直坚持在看书，但是没啥方向性，如果好好计划一下，应该会有效果，试试吧。 自从跟了长赢计划，开始对投资无限感兴趣，进而开始学习一些经济学原理，还没入门。虽然没几个钱，目前跟的计划还是浮亏，但是很开心，而且充满希望。A股这个大底能否让我实现人生巅峰，就看这一波了，手动狗头。有人说，没钱，投个屁资，先老老实实上班赚钱再说。对，也不全对。班是必须好好上的，因为工资是最稳定的现金流，是财富积累的基础。与此同时，如果在不占用过多精力的基础上，采取一些有效的手段，能够实现稳定的增长，复利会给你惊喜的。 来张巴老爷子的图意淫一下，股神不仅起步早，而且起步高啊。1930年生人，14岁就有5千美刀了。1944年5千美刀什么概念？恩，不少！ 顺势而为很重要。房地产是有周期的，啥时涨啥时跌和哪里涨哪里跌，都要看政策。投资要讲策略，什么时候买债券，什么时候买股票，比例如何分配，都要看经济形势。拿18年来说，P2P暴雷连连，应该尽量回避小平台，抱团头部平台。经济下行，大面积裁员，应该避免冲动跳槽，更应该回避房地产和P2P这种处于低谷的行业。冥冥之中，身处一个巨大的洪流之中，身边随便一个小水花可能都会影响人生的走向，懂得顺势借力，会轻松不少。 运气很重要。遥想当年，糊里糊涂进入了IPTV行业，却幸运的赶上了蓬勃发展。是能力强，还是抉择果断，还是预测了未来？其实，事情总会发生，或成或败，只是恰巧是你，不悲不喜，运气而已。 了解自己，坚持自己，顺势而为，剩下的交给运气。","categories":[{"name":"总结","slug":"总结","permalink":"http://guowensheng.com/categories/%E6%80%BB%E7%BB%93/"}],"tags":[{"name":"年终总结","slug":"年终总结","permalink":"http://guowensheng.com/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"}]},{"title":"2018年书单","slug":"2019-02-04-2018-year-book-list","date":"2019-02-04T15:38:51.000Z","updated":"2020-03-20T13:09:26.925Z","comments":true,"path":"posts/2019-02-04-2018-year-book-list/","link":"","permalink":"http://guowensheng.com/posts/2019-02-04-2018-year-book-list/","excerpt":"增长是门学问，值得好好研究，本书就一些基本理论和成功案例进行了很好的说明，入门了…… 奖励不一定是好事，情怀才能长久，关注驱动力，关注人们本身。 剖析选择让人痛苦的原因，并给出11条建议，让生活更加美好。 教我们怎么去影响别人，与怎么不被影响，信息爆炸的时代，尽量处理好每一条信息吧。读书笔记 大道至简，道理一看就懂，如何落地才是关键。 没嘛别没钱。","text":"增长是门学问，值得好好研究，本书就一些基本理论和成功案例进行了很好的说明，入门了…… 奖励不一定是好事，情怀才能长久，关注驱动力，关注人们本身。 剖析选择让人痛苦的原因，并给出11条建议，让生活更加美好。 教我们怎么去影响别人，与怎么不被影响，信息爆炸的时代，尽量处理好每一条信息吧。读书笔记 大道至简，道理一看就懂，如何落地才是关键。 没嘛别没钱。","categories":[{"name":"阅读","slug":"阅读","permalink":"http://guowensheng.com/categories/%E9%98%85%E8%AF%BB/"}],"tags":[{"name":"书单","slug":"书单","permalink":"http://guowensheng.com/tags/%E4%B9%A6%E5%8D%95/"}]},{"title":"读书笔记之《影响力》","slug":"2018-09-09-reading-notes-of-influence","date":"2018-09-09T14:08:19.000Z","updated":"2020-03-20T13:09:26.925Z","comments":true,"path":"posts/2018-09-09-reading-notes-of-influence/","link":"","permalink":"http://guowensheng.com/posts/2018-09-09-reading-notes-of-influence/","excerpt":"买书的时候后以为是写如何提升自身影响力的，其实是写哪些心里原则影响了人们的行为与决策。六大影响力原则：互惠、承诺和一致、社会认同、喜好、权威、稀缺。 01 影响力的武器 大量动物形成了一系列盲目而机械的规律性行为模式，例如，雌火鸡通过“叽叽”声来照顾小火鸡。可笑的是雌火鸡竟然会照顾一只发出“叽叽”声的臭鼬充气玩具，要知道臭鼬可是火鸡的天敌啊。这种固定的行为模式虽然看起来比较荒唐，但是在大部分情况下都运作良好。我觉得这应该是千百万年进化的结果，已经固化到基因里去了。 这种所谓的“按一下就播放”的行为，在我们人类身上也同样的存在。例如，我们在要别人帮忙的时候，要是能给一个理由，成功的概率会大很多。 “真不好意思，我有5页纸要印。因为时间有点赶，我可以先用复印机么？”（94%同意） “真不好","text":"买书的时候后以为是写如何提升自身影响力的，其实是写哪些心里原则影响了人们的行为与决策。六大影响力原则：互惠、承诺和一致、社会认同、喜好、权威、稀缺。 01 影响力的武器大量动物形成了一系列盲目而机械的规律性行为模式，例如，雌火鸡通过“叽叽”声来照顾小火鸡。可笑的是雌火鸡竟然会照顾一只发出“叽叽”声的臭鼬充气玩具，要知道臭鼬可是火鸡的天敌啊。这种固定的行为模式虽然看起来比较荒唐，但是在大部分情况下都运作良好。我觉得这应该是千百万年进化的结果，已经固化到基因里去了。 这种所谓的“按一下就播放”的行为，在我们人类身上也同样的存在。例如，我们在要别人帮忙的时候，要是能给一个理由，成功的概率会大很多。 “真不好意思，我有5页纸要印。因为时间有点赶，我可以先用复印机么？”（94%同意）“真不好意思，我有5页纸要印。我可以先用复印机吗？”（60%同意）“不好意思，我有5页纸要印。我能先用复印机吗？因为我必须印点儿东西。”（93%同意） 以上三个问题说明，什么理由不重要，有理由就行。 这种机械式的行为模式往往会被人利用，用很小的代价换来可观的成果，达到四两拨千斤的效果。 02 互惠互惠原理如何起作用 这条原理说，要是人家给了我们什么好处，我们应该尽量回报。 互惠及其伴随而来的亏欠还债感，在人类文化中十分普遍。 著名考古学家理查德·李基（RichardLeakey）认为：正是因为有了互惠体系，人类才成为人类。他说：“由于我们的祖先学会了在‘有债必还的信誉网’里分享食物和技巧，我们才变成了人。”文化人类学家泰格和福克斯认为这种“欠债网”是人类的一种独特适应机制，有了它，人类才得以实现劳动分工，交换不同形式的商品和服务，让个体相互依赖、凝结成高效率的单位。 互惠原理适用于强加的恩惠 一些人靠着硬塞给我们一些好处，就能触发我们的亏欠感。 互惠原理可触发不对等交换 为什么最初的小小善意往往刺激人们回报以大得多的恩惠？亏欠感让人觉得很不舒服，是一个很重要的原因。 违背互惠原理，接受而不试图回报他人善举的人，是不受社会群体欢迎的。 互惠是人类关系的重要基础之一，主要靠亏欠感和社会压力产生影响。 互惠式让步 互惠原理通过两条途径来实现相互让步。头一条很明显：它迫使接受了对方让步的人以同样的方式回应；第二条尽管不那么明显，但更为关键：由于接受了让步的人有回报的义务，人们就乐意率先让步，从而启动有益的交换过程。 由于互惠原理决定了妥协过程，你可以把率先让步当成一种高度有效的顺从技巧来使用。这种技巧很简单，一般叫做“拒绝—后撤”术，也叫“留面子”法。 互惠原理和知觉对比原理能产生一种令人望而生畏的强大力量。拒绝—后撤手法便是把它们捏在一起，发挥出惊人效用的。 所谓的狮子大开口，其实是智慧的表现，一大口吃不上，但能吃上一小口，其实一开始就只想吃一小口而已。一大口到一小口的让步，一大口跟一小口的对比，妙哉。 拒绝—后撤手法似乎不光刺激人们答应请求，还鼓励他们切身实践承诺，甚至叫他们自愿履行进一步的要求。 让步举动还有一项我们尚未着手研究的、少有人知的积极副作用：对方会对这种安排滋生出更大的责任感和满意感。 责任感来源于对方感觉是自己促成的结果，满足感来源于对方感觉获得了让步。所以“拒绝—后撤”不仅不会带来更多的副作用，反而会促进履行承诺。 如何拒绝 倘若别人的提议我们确实赞同，那就不妨接受它；倘若这一提议别有所图，那我们就置之不理。 03 承诺和一致 人人都有一种言行一致（同时也显得言行一致）的愿望。一旦我们做出了一个选择，或采取了某种立场，我们立刻就会碰到来自内心和外部的压力，迫使我们按照承诺说的那样去做。在这样的压力之下，我们会想方设法地以行动证明自己先前的决定是正确的。 言出必行 信仰、言语和行为前后不一的人，会被看成是脑筋混乱、表里不一，甚至精神有毛病的。另一方面，言行高度一致大多跟个性坚强、智力出众挂钩，它是逻辑性、稳定性和诚实感的核心。 在我们的文化里，一个人高度的言行一致是备受称道的——也理应如此。 由于言行一致一般来说符合我们的最佳利益，我们很容易养成自动保持一致的习惯，哪怕有时候这么做并不明智。不假思索地言行一致，有可能带来灾难性的后果。不过，就算是盲目地保持一致，也不乏迷人之处。 首先，和大多数其他自动响应方式一样，它为穿越复杂的现代生活提供了一条捷径。其次，机械地保持一致还有第二点吸引力，它更容易令人避免误入歧途。 “我可不会什么读心术。只是，我刚好知道几家大玩具公司是怎么拉动一、二月份的销量的。圣诞节之前，他们开始在电视上做一些特别玩具的广告，这些广告都很有意思。显然，孩子们想要这样的玩具，他们缠着父母答应圣诞节买来送给自己。好了，这些玩具公司的精明之处就在于：他们故意不给商店提供足够的货品。这下子，大部分当爹妈的会发现这些玩具早就卖光了，他们只好买下等值的其他玩具给孩子充数。当然了，对于这些充数的玩具，制造商们的货给得足足的。接着，过完了圣诞节，公司又开始为前面那些特别的玩具打广告，这使得孩子们越发想要了。他们跑去跟父母哭诉：‘你答应过的，你答应过的。’于是当爹妈的只好痛苦地跑去玩具店履行自己的诺言。” 一遍骂奸商，一边想要学为己用。 承诺是关键 诱使我们采取某种行动或作出某种表态，而后通过我们内心保持一致的压力逼我们顺从。 在接受琐碎请求时务必小心谨慎，因为一旦同意了，它就有可能影响我们的自我认知。它不光能提高我们对分量更大的类似请求的顺从度，还能使我们更乐意去做一些跟先前答应的小要求毫不相关的事情。 所有的“登门槛”专家似乎都对同一件事情感到兴奋不已：你可以利用小小的承诺操纵一个人的自我形象；你可以利用它们把人们变成“公仆”，把潜在客户变成“客户”，把战俘变成“合作者”。只要你把一个人的自我形象设置在了你想要的位置上，那么这个人就会自然而然地遵从一整套与这一全新自我形象相一致的要求。倒也不是所有的承诺都会影响自我形象。要想让承诺达到这样的效果，必须满足一定的条件：它们得是当事人积极地、公开地、经过一番努力后自由选择的。 无形中改变他人的自我认知真的可怕，防不胜防。 无关紧要的承诺能让人作出更深入的一致性行为。而书面宣言这种承诺方式的好处就更加明显了。第一，它成了一个行为业已发生的物证。第二，书面自白可以拿给其他人看。当然，这就意味着可以用它来令其他人信服，劝说别人朝着声明里的方向改变态度。更重要的是，书面承诺能令其他人信服：写这份东西的人，真心相信自己写下来的事情。 小时候检查保证书没少写啊，没感觉多管用。 一旦主动作出了承诺，自我形象就要承受来自内外两方面的一致性压力。一方面，是人们内心里有压力要把自我形象调整得与行为一致；另一方面，外部还存在一种更为鬼祟的压力，人们会按照他人对自己的感知来调整形象。 定下目标，把它写下来。不管你的目标是什么，关键是你定了这个目标，这样你就有了努力的方向。接着，把它写出来。把东西写下来，有种神奇的力量。所以，定下目标，把它写下来。等你达到了这个目标，再定另一个，也写下来。你会进步如飞的。 OKR的内在驱动力原来在于承诺一致原则在里面。 公开承诺往往具有持久的效力。 为一个承诺付出的努力越多，它对承诺者的影响也就越大。 团队成员的忠诚和奉献精神，能极大地提高团队的凝聚力和生存概率。有人研究了54种部落文化，发现内部最为团结的部落，都有着最严格、最戏剧化的成年仪式。依照阿伦森和米尔斯的解释，严格的入会仪式极大地强化了新成员对团体的承诺感，不足为奇，各团体必然会想方设法地维系这一事关组织将来存活的纽带，倘若有人想取消它，那可万万不能应允。 类似Google这种大公司的困难重重的面试环节，应该也有这样的效果吧。 只有当我们认为外界不存在强大的压力时，我们才会为自己的行为发自内心地负起责任 如何拒绝 尽管保持一致一般而言是好的，甚至十分关键，我们也必须避免愚蠢的死脑筋。 04 社会认同社会认同原理 在判断何为正确时，我们会根据别人的意见行事。 我们对社会认同的反应方式完全是无意识的、条件反射式的，这样一来，偏颇甚至伪造的证据也能愚弄我们。 死亡原因：不确定 一般来说，在我们自己不确定、情况不明或含糊不清、意外性太大的时候，我们最有可能觉得别人的行为是正确的。 在审视他人反应，消除不确定性的过程中，我们很容易忽视一点微妙而重要的事实：其他人有可能也在寻找社会证据。尤其是在局面模糊不清的时候，人人都倾向于观察别人在做什么，这会导致一种叫做“多元无知”的有趣现象。深入地理解“多元无知”现象，能帮我们解释一道在全国频频出现的谜题（也有人说，这叫举国之耻）：受害者迫切需要帮助，全体旁观者却无动于衷。 拉坦纳和达利的推论得出了一个有趣的结果，即对紧急事件的受害者而言，“人越多越安全”的想法有可能完全错误。跟一群人在场比起来，要是当时的旁观者只有一个，说不定急需救助者的生存概率反而更大一些。 多元无知效应似乎在陌生人里显得最为突出：因为我们喜欢在公众面前表现得优雅又成熟，又因为我们不熟悉陌生人的反应，所以，置身一群素不相识的人里面，我们有可能无法流露出关切的表情，也无法正确地解读他人关切的表情。 旁观者群体没能帮忙，不是因为他们无情，而是因为他们不能确定。 一般而言，在需要紧急救助的时候，你的最佳策略就是减少不确定性，让周围人注意到你的状况，搞清楚自己的责任。 有样学样 正如我之前所说，跟其他影响力武器一样，社会认同原理也有最适用的条件。我们已经探讨了这些条件中的一个：不确定性。毫无疑问，人们在不确定时，更容易根据他人的行为来判断自己该怎么做。除此以外，还有一个重要的适用条件：相似性。我们在观察与我们相似的人的行为时，社会认同原理能发挥出最大的影响力。这类人的行为让我们意识到自己该怎样做才正确。因此我们更倾向于仿效相似的人，而不是跟我们不同的人。 我们会根据他人的行为来判断自己怎么做才合适，尤其是在我们觉得这些人跟自己相似的时候。 要是新闻报道的是一个人自杀的消息，之后增加的也大多是一个人出事的事故；要是新闻报道的是一个人自杀并导致多人死亡的消息，之后增加的就往往是导致多人死亡的车祸或坠机事故。 这是社会认同原理的一个病态例证：这些人根据其他陷入困境的人如何行动，决定自己该怎么做。 要是自杀新闻后增多的事故真的意味着有人在蓄意模仿，那么，这些跟风模仿者最可能效法的是跟自己类似的人。 报道自杀的消息，促使一部分跟自杀者类似的人走向了绝路——因为他们现在发现自杀的念头更加站得住脚了。 在自杀事件上头条新闻之后的一段时间里改变出行方式，能提高我们的生存概率。这可真是帮了我们一个大忙。对其善加利用似乎分外明智 如何拒绝 面对明显是伪造的社会证据，我们只要多保持一点警惕感，就能很好地保护自己了。 首先，我们似乎持有这样的假设：要是很多人在做相同的事情，他们必然知道一些我们不知道的事情。尤其在我们并不确定的时候，我们很乐意对这种集体智慧投入极大的信任。其次，人群很多时候都是错的，因为群体的成员并不是根据优势信息才采取行动，而只是基于社会认同原理在做反应。 05 喜好 我们大多数人总是更容易答应自己认识和喜欢的人所提出的要求。 “百特惠聚会”利用朋友关系来给人施加压力，尽管人们都知道，但还是抵挡不胡。 我喜欢你的理由 外表魅力 光环效应指的是，一个人的某个正面特征就能主导其他人看待此人的眼光。 研究表明，我们会自动给长得好看的人添加一些正面特点，比如有才华、善良、诚实和聪明等。而且我们在作出这些判断的时候并没有意识到外表魅力在其中发挥的作用。“好看就等于好”这种无意识假设造成的部分后果把我吓了一跳。 相似性 我们喜欢与自己相似的人。不管相似之处是在观点、个性、背景还是生活方式上，我们总有这样的倾向。 恭维 很多时候，别人恭维我们、亲近我们，其实是有求于我们。 接触与合作 大多数时候，我们都喜欢自己熟悉的东西。 自己的脸和镜子中左右颠倒的脸，我们往往更喜欢后者。 由于熟悉会影响人的喜好，因此它对我们的各类决定都发挥了一定的作用，包括选举哪一位政客。 仅仅因为改了一个大家比较熟悉的名字就可以从选举中胜出。 合作对喜好过程有着强大的影响力。 条件反射和关联 负面关联 人总是自然而然地讨厌带来坏消息的人，哪怕报信人跟坏消息一点关系也没有。光是两者之间存在联系，就足以引发我们的厌恶了。 联系原理是一条普遍性的概念，好坏联系都归它管。不管是好事还是坏事，只要跟我们偶然联系在了一起，就都会影响人们对我们的感觉。 父母把关联原理带来的负面效应教给了我们，他们说的没错，人们的确有“物以类聚，人以群分”“近朱者赤，近墨者黑”的想法。 正面关联 制造商们总是急着把自己的产品跟当前的文化热潮联系起来。 把产品跟名人联系在一起，是广告商利用关联原理赚钱的另一种办法。 制造商还乐意花大价钱让自己的产品跟流行艺人联系起来。 拉茨兰把这套手法叫做“午宴术”，他发现，受试者对就餐期间接触到的人或事物更为喜爱。 自主关联 人们深明关联原理的奥妙，并努力把自己跟积极的事情联系起来，跟消极的事情保持距离——哪怕他们并非事情的起因。 根据关联原理，倘若我们能用一些哪怕是非常表面的方式（比如我们的居住地）让自己跟成功联系起来，我们的公共形象也会显得光辉起来。 我们展示积极的联系，隐藏消极的联系，努力让旁观者觉得我们更高大，更值得喜欢。 在我们以个人成就为傲的时候，我们不会沾别人的光。只有当我们在公在私的威望都很低的时候，我们才会想借助他人的成功来恢复自我形象。 如何拒绝 把注意力放在效果而非成因上，我们就用不着去辨别、转移针对好感的多种心理影响力了——这本来也是一个近乎不可能完成的繁琐任务。在跟顺从专业人士接触的时候，我们只需关注跟好感有关的一件事就行：我们是不是觉得自己超乎寻常地、迅速、热烈地喜欢上了对方？只要发现这种感觉，我们就该警惕了，他可能采用了某种手法，而这时我们就可以采取必要的反击对策。 06 权威权威高压的力量 在权威的命令下，成年人几乎愿意干任何事情。 盲目服从的诱惑和危险 被人类普遍接受的多层次权威体制能赋予社会巨大的优势，有了它，适于资源生产、贸易、国防、扩张和社会控制的成熟社会结构才得以发展。 因此，打从出生之日起，社会就教导我们：顺从权威是正确的，违抗权威是不对的。 来自公认权威的信息能为我们判断如何行动提供宝贵的捷径。 毕竟，正如米尔格拉姆所说，服从权威人物的命令，总是能给我们带来一些实际的好处。从小开始，这些人（家长、老师）就比我们懂得更多。我们发现，采纳他们的建议是有益的，部分是因为他们更有智慧，部分是因为他们手里攥着对我们的奖惩。成年之后的情况也是一样，只不过此时的权威人物变成了老板、法官、政府领袖。他们因为所处地位更高的缘故，得以接触到更多的信息并掌握更多的权力，故此按照正当权威的愿望去做是有道理的。正是因为它太有道理，很多时候，哪怕权威人物说的完全没道理，我们也会照着去做。 内涵不是内容 在没有真正权威的情况下，有几种象征权威的符号能十分有效地触发我们的顺从态度。 头衔 头衔比当事人的本质更能影响他人的行为。 头衔除了能让陌生人表现更恭顺，还能让有头衔的那个人在旁人眼里显得更高大。 头衔竟然还会影响对身高的印象。 体格和地位之间存在联系。 衣着 在我们的文化中，还有一种衣着打扮，尽管内涵不如制服那么一目了然，但照样能暗示出权威的地位，那就是剪裁合体的西装。它也能唤起陌生人的顺从与尊重。 身份标识 衣着除了可以发挥制服的作用，还可以用于装饰性目的，表现更广义上的权威。精致、昂贵的服装承载着地位和身份的光环，珠宝和汽车等类似的身份标志也是一样。 如何拒绝 权威的资格，以及这些资格是否跟眼前的主题相关。 “这个权威是真正的专家吗？” “这个专家说的是真话吗？” 在评估权威可信度的时候，我们应当牢牢记住，顺从专业人士经常会使用一种小策略，让我们相信他们真诚可靠：他们会偶尔说些有违自己利益的话。运用得当的话，这种方法可以微妙而有效地“证明”当事人的诚实。 07 稀缺物以稀为贵 机会越少见，价值似乎就越高 对失去某种东西的恐惧，似乎要比对获得同一物品的渴望，更能激发人们的行动力。 倘若瑕疵把一样东西变得稀缺了，垃圾也能化身成值钱的宝贝。 逆反心理 我们基本可以根据获得一样东西的难易程度，迅速准确地判断它的质量。 机会越来越少的话，我们的自由也会随之丧失。 保住既得利益的愿望，是心理逆反理论的核心。 一旦短缺——或其他因素妨碍我们获取某物，我们就会比从前更想得到它，更努力地想要占有它，跟这种妨碍对着干。 对两岁的孩子和十几岁的青少年而言，逆反心理贯穿多种体验和经历，而且总是狂躁有力的。而对我们其余大多数人来说，逆反的能量池是平平静静，隐藏起来的，只是偶尔才像喷泉一样爆发一次。 我们看重受限的信息，一旦认识到这一点，稀缺原理就能被应用到物质商品之外的领域。信息、沟通和知识都适用这条原理。从这个角度考虑，我们可以看出，想让信息变得更宝贵，不一定非要封杀它，只要把它弄成稀缺信息就行了。根据稀缺原理，要是我们觉得没法从别处获取某条信息，我们就会认为它更具说服力。 最佳条件 较之一贯短缺，对从充裕变到短缺的饼干，人们的反应更为积极。 管教前后不一的父母，最容易教出反叛心强的孩子。 参与竞争稀缺资源的感觉，有着强大的刺激性。 渴望拥有一件众人争抢的东西，几乎是出于本能的身体反应。 拍卖 如何拒绝 喜悦并非来自对稀缺商品的体验，而来自对它的占有。 如果我们发现自己在顺从环境中受到了稀缺压力的包围，那么，我们最好采用两步应对法。一旦我们觉得自己在短缺影响下产生了高度的情绪波动，我们就应该把这种波动当成暂停的信号。要做出明智的决定，恐慌、狂热的反应是不合适的。我们需要冷静下来，重拾理性的眼光。只要做到了这一点，我们就可以转入第二个阶段：问问自己，为什么我们想要那件东西。如果答案是我们想要它主要是因为想拥有它，那么我们应当利用它的稀缺性来判断该为它出多少钱。倘若答案是我们想要它主要是为了它的功能（也即想要驾驶它、喝它或吃它），那么我们必须牢记一点：该物品不管是稀缺还是充足，其功能都是一样的。简而言之，稀缺的饼干并没有变得更好吃。 尾声自动反应 很多时候，我们在对某人或某事做判断的时候，并没有用上所有可用的相关信息。相反，我们只用到了所有信息里最具代表性的一条。虽说这条孤立的信息通常都能给我们正确的指导，但它也能让我们犯下显而易见的愚蠢错误。这样的错误，一旦遭到其他聪明人的利用，会让我们显得又笨又呆，后果还很恶劣。另一方面，还有一个复杂的平行主题贯穿本书：尽管只靠孤立数据容易做出愚蠢的决定，可现代生活的节奏又要求我们频繁使用这一捷径。 况且为了追求效率，有时候我们也必须放弃耗时、复杂、整体把握的决策过程，转而使用更简单、原始、由单一特征触发的响应方式。 捷径应受尊重 倘若顺从业者公平公正地利用我们的捷径响应方式，我们就不应该把他们看成是敌人，事实上，他们是我们的盟友，有了他们，我们能更方便地开展高效率、高适应度的生意往来。只有那些通过弄虚作假、伪造或歪曲证据误导我们快捷响应的人才是正确的还击目标。","categories":[{"name":"阅读","slug":"阅读","permalink":"http://guowensheng.com/categories/%E9%98%85%E8%AF%BB/"}],"tags":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://guowensheng.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"}]},{"title":"零基础AI入门指南","slug":"2018-05-23-getting-started-with-ai","date":"2018-05-23T14:06:44.000Z","updated":"2020-03-20T13:09:26.925Z","comments":true,"path":"posts/2018-05-23-getting-started-with-ai/","link":"","permalink":"http://guowensheng.com/posts/2018-05-23-getting-started-with-ai/","excerpt":"技术浪潮一波又一波，目前最汹涌的非AI莫属，无数小白迷离着双眼，准备学习一波，又不知从何入手。本人去年以身犯险，虽死磕未果，但初窥门径，分享一些心得，供纯小白入门使用。 首先AI对数学基础要求比较高，微积分、线性代数、概率与统计，缺一不可。其次需要有一定的编程能力，Python或R至少得会一种。然后AI本身还有一大堆的理论和算法需要学习。最后不要以为理论都会了就算入门了，实践才是最重要的。 数学、编程、理论、实践，每一个阶段都像一座大山，需要你去一座座的翻越，而在翻山的过程中有一个隐藏的BOSS始终伴你左右，随时准备把你击溃。这个BOSS就是小白入门AI时最最最需要克服的困难——挫败感。对于小白来说，AI学习是个漫长枯燥又极其困难的过程，尤其死磕算法的时候，稍有不慎，疲惫和挫败感就会把你","text":"技术浪潮一波又一波，目前最汹涌的非AI莫属，无数小白迷离着双眼，准备学习一波，又不知从何入手。本人去年以身犯险，虽死磕未果，但初窥门径，分享一些心得，供纯小白入门使用。 首先AI对数学基础要求比较高，微积分、线性代数、概率与统计，缺一不可。其次需要有一定的编程能力，Python或R至少得会一种。然后AI本身还有一大堆的理论和算法需要学习。最后不要以为理论都会了就算入门了，实践才是最重要的。 数学、编程、理论、实践，每一个阶段都像一座大山，需要你去一座座的翻越，而在翻山的过程中有一个隐藏的BOSS始终伴你左右，随时准备把你击溃。这个BOSS就是小白入门AI时最最最需要克服的困难——挫败感。对于小白来说，AI学习是个漫长枯燥又极其困难的过程，尤其死磕算法的时候，稍有不慎，疲惫和挫败感就会把你击倒，一蹶不振，甚至放弃整个学习计划。 给自己创造一个好的学习环境是非常重要的。如果能有人教你，一步一步的给与指导，并且可以随时解答问题，那么不用往下看了，你已经身在天堂。如果能有人回答你的问题，哪怕不是随时，那都是天大的优势，请好好珍惜。如果能有个伴一起学习，有问题可以讨论，有经验可以交流，哪怕只是相互督促鼓励一下，那都是极好的。这些都可以有效的避免挫败感。 最怕的就是一个人孤军奋战，孤立无援，那挫败感来了，一打一个准。我就是这种情况，几次学习，几度放下。经过几次的反复，血和泪总结出的经验，切忌死磕。尤其是数学和算法这东西，不明白就是不明白，怎么想都没用，这种情况下死磕，大概率是自寻死路。比如，SVM我至少学了三次，每次都是因为数学卡住，死磕了几天便厌学放弃了。然后等那股挫败感慢慢消逝，再重新学习，之前的坎竟然神奇的一跃而过，从不明白到明白，只差中间一段时间的休息和一颗平和的心。 想想我们学习物理的时候，各种定理定律，大部分都不会证明，还不一样拿起来就用。在学习AI的过程中同样会遇到大量的证明，懂不懂随缘，懂了更好，不懂就直接记结论，不影响学习效果。我们的目的是入门，不是一上来就成为专家。 我个人总结的入门心法，快乐学习，不懂就问，切忌死磕，劳逸结合，遇到坎了便在心中默念，可保取得真经。 下面奉上一份切实可行的学习计划，本人亲身验证，稳！ 先导课程微积分：麻省理工学院公开课：微积分重点线性代数：麻省理工学院公开课：线性代数 &amp; 习题课概率：可汗学院公开课：概率统计：可汗学院公开课：统计学 都是视频课程，特点就是没那么枯燥，但是学起来非常慢，所以有基础的话可以挑着看。有书的可以看看书，大学学过的话，捡起来会非常快。Gilbert Strang老先生讲的是真的好，遥想当年要是能遇见这样的老师，感叹中国教育任重而道远。可汗学院讲的非常通俗易懂，一个知识点一节课，短小精悍，适合零基础，缺点是有点墨迹，反正我是跳着看且没看完的。 不必纠结于我推荐的课程，找到适合自己的最重要，把相关的知识点学到了就可以了，这个阶段主要是熟悉，为后面的理论学习奠定基础。 基础课程斯坦福大学Andrew Ng：斯坦福大学公开课：机器学习课程 &amp; 课程大纲台湾大学林轩田：机器学习基石 &amp; 机器学习技法周志华：机器学习（西瓜书）李航：统计学习方法 Andrew Ng可以算的上机器学习界的网红了，无数人都是从他的课程入门的。个人感觉这个课程讲的不是很细致，因为人家默认你的先导课程已经掌握的很好了，所以很多东西要结合讲义仔细推敲。其实最大的问题还是在于英文授课，并且字幕捉急啊。我推荐的是网易的版本，存在这些问题，可以试试coursera的版本，应该会好些。 我主要学习的是Andrew Ng的课程，并且断断续续的学习了很多遍，最终也没有学完。直到我遇见了林轩田老师的课程，中文授课，简直一股清流。由于我遇见的时间已经比较晚了，大部分都学过了，所以只是简单的学了几课，感觉非常好，强烈推荐。如果再让我选一次的话，我会从这个课程入手，毕竟母语的优势是无法比拟的。 推荐的两本书都是必备的，建议作为参考书，遇到问题翻一翻，相互对照，可以加深理解。直接用西瓜书入门也可以，缺点就是比较枯燥，没有视频那么生动。还是那句话，选适合自己的方式。 编程课程Dataquest就是锻炼动手能力的，建议买个基础课程，29刀/月。有编程基础的，每天晚上突击一个月就可以了，该会的都会学到，基础不好的可能要多花些时间。千万别不舍得花钱，我告诉你绝对值！ Dataquest所有的内容都是在线的基于浏览器的，如果想在自己电脑上练练手，推荐Anaconda，一站式，All in One，好用，省心！ 实践课程kaggle是一个神奇的网站，维基百科了解一下。对于小白来说，直接参赛难度有点大，但是由于Kernels都是公开的，模仿学习一下还是非常愉快的。这里推荐一个专供新手入门的比赛Titanic: Machine Learning from Disaster，其中得票最多的Exploring Survival on the Titanic。这个Kernel是用R语言写的，思路清晰内容详细，需要做什么、怎么做、为什么要这么做，一步一步带着你解决问题。我推荐用Python原封不动的重写一遍，完美巩固之前学习的知识，加深理解。 最后，其实这是一篇机器学习入门，那标题为什么要写AI入门呢？一方面，他们同宗同源，机器学习入门了，AI也就入门了。另一方面，机器学习这么土，写AI才会有人看嘛，木哈哈哈哈……","categories":[{"name":"技术","slug":"技术","permalink":"http://guowensheng.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"AI","slug":"AI","permalink":"http://guowensheng.com/tags/AI/"}]},{"title":"2017年总结","slug":"2018-02-18-2017-year-summary","date":"2018-02-18T10:52:52.000Z","updated":"2020-03-20T13:09:26.925Z","comments":true,"path":"posts/2018-02-18-2017-year-summary/","link":"","permalink":"http://guowensheng.com/posts/2018-02-18-2017-year-summary/","excerpt":"没定什么目标，总结自然也就不太好写，翻翻前两年的总结，如果今年还那么写，那就真没啥长进了。2015年充满希望，2016年不尽满意，2017年哥们平和了。 2017初计划说要对自己狠一点，初步定了一个健身和跟AI死磕的目标。起初还挺顺利的，每天列计划，每天逐一完成，非常充实，生活充满希望和阳光。但是我低估了目标本身的难度和执行的方式，在学习AI的过程中遇到了困难，挫败感满满，导致连健身都没有像刚开始一般坚持了。中间沉寂了挺长一段时间，等待那种感觉慢慢消逝，才又重拾那份执着。跳过当初的阻碍，直接按照一开始的计划往下执行，然后效果竟然出奇的好，AI入门达成。 由于对前一年的不满，年初的时候给自己打满了鸡血，太过执着于要做点什么，要达到什么，用力过猛，反而伤到了自己。人生有目标有执着挺好，但要结","text":"没定什么目标，总结自然也就不太好写，翻翻前两年的总结，如果今年还那么写，那就真没啥长进了。2015年充满希望，2016年不尽满意，2017年哥们平和了。 2017初计划说要对自己狠一点，初步定了一个健身和跟AI死磕的目标。起初还挺顺利的，每天列计划，每天逐一完成，非常充实，生活充满希望和阳光。但是我低估了目标本身的难度和执行的方式，在学习AI的过程中遇到了困难，挫败感满满，导致连健身都没有像刚开始一般坚持了。中间沉寂了挺长一段时间，等待那种感觉慢慢消逝，才又重拾那份执着。跳过当初的阻碍，直接按照一开始的计划往下执行，然后效果竟然出奇的好，AI入门达成。 由于对前一年的不满，年初的时候给自己打满了鸡血，太过执着于要做点什么，要达到什么，用力过猛，反而伤到了自己。人生有目标有执着挺好，但要结合自身的情况，且不要过于受他人的影响，否则容易走火入魔。还好本人从小练就一身自我调节的本领，才自己治好了内伤。 如果像16年那样着眼于失败，17年的总结那就没法写了，各项指标全面下滑，人生简直进入了下坡道，直奔低谷而去了。今年不一样了，我们着眼于成功。读书和健身虽然没有16年勤奋了，但是至少坚持下来了。文章虽然没怎么写，但是咱AI入门了，不仅弄明白了保险，养鱼也入门了呀。孩子健康成长，家人平平安安，还奢求个啥子。看，黑暗和阳光，就在一念之间。 恩，心态调整好，做好迈入新的一年的准备。目标和计划就不说了，因为标题说了，是总结。简单说一下希望吧，坚持好的，去掉不好的，进步多一点，争取能有突破，就酱。","categories":[{"name":"总结","slug":"总结","permalink":"http://guowensheng.com/categories/%E6%80%BB%E7%BB%93/"}],"tags":[{"name":"年终总结","slug":"年终总结","permalink":"http://guowensheng.com/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"}]},{"title":"2017年书单","slug":"2018-02-18-2017-year-book-list","date":"2018-02-18T10:27:18.000Z","updated":"2020-03-20T13:09:26.925Z","comments":true,"path":"posts/2018-02-18-2017-year-book-list/","link":"","permalink":"http://guowensheng.com/posts/2018-02-18-2017-year-book-list/","excerpt":"《阿西莫夫：永恒的终结》，好看，该有的都有了，完美！ 《从零开始做运营》，作为从零开始的我，确实非常适合入门的书。 《参与感：小米口碑营销内部手册》，揭开小米背后的秘密，道理很简单，不看不明白，有收获！ 《浪潮之巅》，立志不再做这一波波浪潮的旁观者！ ​​​​ 《那些古怪又让人忧心的问题》，填补脑洞真不是一件容易的事。 《1984》，一个集权的社会，让人绝望。不太喜欢，信息量太少，有些平淡。 《免费：难以抗拒的力量》，免费就是转移产品和服务的成本，道理很简单，能总结出来还是需要功力的，短小精悍的书，不错！ 《用地图看懂世界格局》，欧盟、美国、俄罗斯、中国，四大势力的爱恨情仇，以及中东这个兵家必争之地，都有了一个大致的了解，时政新闻终于能看懂一些了，又","text":"《阿西莫夫：永恒的终结》，好看，该有的都有了，完美！ 《从零开始做运营》，作为从零开始的我，确实非常适合入门的书。 《参与感：小米口碑营销内部手册》，揭开小米背后的秘密，道理很简单，不看不明白，有收获！ 《浪潮之巅》，立志不再做这一波波浪潮的旁观者！ ​​​​ 《那些古怪又让人忧心的问题》，填补脑洞真不是一件容易的事。 《1984》，一个集权的社会，让人绝望。不太喜欢，信息量太少，有些平淡。 《免费：难以抗拒的力量》，免费就是转移产品和服务的成本，道理很简单，能总结出来还是需要功力的，短小精悍的书，不错！ 《用地图看懂世界格局》，欧盟、美国、俄罗斯、中国，四大势力的爱恨情仇，以及中东这个兵家必争之地，都有了一个大致的了解，时政新闻终于能看懂一些了，又打开了一扇新世界的大门。 《未来简史：从智人到智神》，未来没有历史那么好写，让我一度认为本书相比前作相去甚远，原本准备打出三星评价，但是本书最后的数据主义观点给了我认识事物新的角度，必须加一星。 真理往往都简单直接，一击即中，受益匪浅。","categories":[{"name":"阅读","slug":"阅读","permalink":"http://guowensheng.com/categories/%E9%98%85%E8%AF%BB/"}],"tags":[{"name":"书单","slug":"书单","permalink":"http://guowensheng.com/tags/%E4%B9%A6%E5%8D%95/"}]},{"title":"中了手机的毒","slug":"2017-06-14-poisoned-by-mobile-phone","date":"2017-06-14T07:00:07.000Z","updated":"2020-03-20T13:09:26.925Z","comments":true,"path":"posts/2017-06-14-poisoned-by-mobile-phone/","link":"","permalink":"http://guowensheng.com/posts/2017-06-14-poisoned-by-mobile-phone/","excerpt":"手机作为通讯工具无限的提升了我们的效率，手机作为智能设备无限的改善了我们的生活，如果这世界忽然没有了手机，我想那应该算世界末日了吧。 凡是都有两面性，今天我就想说说手机对我产生的负面影响，已经严重影响到了工作和生活。我有个自我观察的习惯，经常有意无意的从上帝视角观察自己的行为，虽然都是很短暂的感觉，但确实能发现问题，我感觉我已经中了手机的毒。注意力很难长时间集中，尤其在工作的时候，非常容易走神，只要一走神，必然下意识的拿起手机，随机点开首屏的某个应用，大部分情况是今日头条，刷上一刷，然后再回去继续原先的事情。其实思路的短暂停顿是很正常的事情，稍微调整一下就可以继续了。但是现在不行了，当思路稍微停顿的那一刻，从手摸向手机到打开应用开始刷起来，是那么的行云流水。就好像这就是自然规律，本就应该这","text":"手机作为通讯工具无限的提升了我们的效率，手机作为智能设备无限的改善了我们的生活，如果这世界忽然没有了手机，我想那应该算世界末日了吧。 凡是都有两面性，今天我就想说说手机对我产生的负面影响，已经严重影响到了工作和生活。我有个自我观察的习惯，经常有意无意的从上帝视角观察自己的行为，虽然都是很短暂的感觉，但确实能发现问题，我感觉我已经中了手机的毒。注意力很难长时间集中，尤其在工作的时候，非常容易走神，只要一走神，必然下意识的拿起手机，随机点开首屏的某个应用，大部分情况是今日头条，刷上一刷，然后再回去继续原先的事情。其实思路的短暂停顿是很正常的事情，稍微调整一下就可以继续了。但是现在不行了，当思路稍微停顿的那一刻，从手摸向手机到打开应用开始刷起来，是那么的行云流水。就好像这就是自然规律，本就应该这样，任何解释都是多余的。如果手机来了什么推送，想起了提示音，那绝对是系统级中断，要是不打开看看，绝对马上生活不能自理。 从《人件》中读到过一种称之为“流”的状态，是一种深度的近乎于冥想的融入情况。在这种状态下感觉不到时间的流逝，心中没有一丝杂念，全身心的投入到所作的事情当中。进入“流”的状态需要一个过程，一般需要15分钟，只要稍微有所打断，就必须重新再来15分钟。自从中了手机的毒，“流”是个什么鬼？！ 忽然意识到了问题的严重性，却也在无意中找到了解决办法。我用的HUAWEI手机，有个“超级省电”模式，一般在电量很低的情况下会提示开启，然后就只剩下电话和短信的功能了。有一次在公司正好电量低又没带充电器，于是便开启了“超级省电”模式，当我思维中断下意识点亮手机屏幕的时候，看见的却是一个黑色的极其朴素的界面，于是我又下意识的关闭了屏幕，继续工作，同样行云流水。从那以后，我便在需要专注的时候开启这种模式，真的有奇效，有一种摆脱了奴隶制的感觉，有一种终于有救了的感觉，从此过上了幸福的生活。 希望大家都能找到自己对付手机的办法。 补充一名躺枪的兄弟，在写这篇文章的过程中“今日头条”被我卸载了，他真的消耗了我大量的时间，用这些时间我应该能做点别的，至少能多跟孩子玩会。希望在写年终总结的时候，没有重新安装他。","categories":[{"name":"思考","slug":"思考","permalink":"http://guowensheng.com/categories/%E6%80%9D%E8%80%83/"}],"tags":[{"name":"生活","slug":"生活","permalink":"http://guowensheng.com/tags/%E7%94%9F%E6%B4%BB/"}]},{"title":"2016年总结","slug":"2017-02-02-2016-year-summary","date":"2017-02-02T08:28:45.000Z","updated":"2020-02-28T14:32:35.783Z","comments":true,"path":"posts/2017-02-02-2016-year-summary/","link":"","permalink":"http://guowensheng.com/posts/2017-02-02-2016-year-summary/","excerpt":"坐在电脑前，不知从何下笔，于是翻看了2015年总结，真是充满了欣喜与希望，满满的收获。回过头来回想2016年，自己并不满意，好像没有什么值得可写的。 书一直在读，从书单上看，跟去年一样，都是自己想读的畅销书，数量上也没有下降，乍一看还不错。但是没有坚持每天读书，尤其年末的时候状态很差，今日头条刷得不亦乐乎。没有读完每一本书，学着别人同时读几本书，导致有几本书只读了一半。读书的效果不好，记不住，一本书只能有个大概印象。读书没有计划性，看到什么书好就马上买来看，导致还有不少书在书架上落灰。 文一直在写，从量上来看，比去年少了不少，说明学习少了，思考少了，总结少了，懒了。逆水行舟，不进则退，尤其在IT这个行业里，进步慢了，分分钟被赶超。其实有些东西也学了，比如区块链，文章没少看，但实在是不知道","text":"坐在电脑前，不知从何下笔，于是翻看了2015年总结，真是充满了欣喜与希望，满满的收获。回过头来回想2016年，自己并不满意，好像没有什么值得可写的。 书一直在读，从书单上看，跟去年一样，都是自己想读的畅销书，数量上也没有下降，乍一看还不错。但是没有坚持每天读书，尤其年末的时候状态很差，今日头条刷得不亦乐乎。没有读完每一本书，学着别人同时读几本书，导致有几本书只读了一半。读书的效果不好，记不住，一本书只能有个大概印象。读书没有计划性，看到什么书好就马上买来看，导致还有不少书在书架上落灰。 文一直在写，从量上来看，比去年少了不少，说明学习少了，思考少了，总结少了，懒了。逆水行舟，不进则退，尤其在IT这个行业里，进步慢了，分分钟被赶超。其实有些东西也学了，比如区块链，文章没少看，但实在是不知道怎么下笔，因为没到那个深度，写出来也没啥意思。想深入学习，又想学别的，深度与广度真的难以把握。 身一直在健，哑铃坚持下来了，没事就拿起来举两下。原来坚持每周一次的P90X腹肌撕裂者间断了，这是最让我沮丧的，现在都不知道原因。虽然每周都会耍一耍，但是断断续续的，整体没啥效果。身体上没有明显的变化，这样也就缺少了对自己最直接激励，动力渐渐不足。 工作上，之前制定的职级评价体系有漏洞，项目间的评定无法做到公平。于是在年中的大范围评定中增加了技术管理委员会和项目管理委员会，进行跨项目的评审。但是由于部门人数不够，相互之间都比较熟悉，评审中难免人情世故，无法达到满意的效果。年底提出并制定OKR制度，不为绩效考核，只为方向明确。刚开始执行，先摸着石头过河吧。 生活上，看孩子占了很大一部分业余时间，等孩子睡了，自己也累了，没心思学习了。即使有精力，也平衡不好，是该健身，还是该看书，还是该学习，彷徨中便玩起了手机。其实看孩子时也不专心，经常一边看手机电视一边跟孩子玩，效果不好。 2015年是从0到1的一年，是一个跨越，从无到有自然充满了惊喜。2016年跟2015年保持了同样的节奏，所以只做到了从1到2。这对于现在的我来说，是远远不够的，我需要的是一个从1到10的跨越。那么2016年的问题出在哪呢？第一，没有目标，没有计划，跟着感觉走。第二，不自律，管不住自己，难成大事。第三，缺乏及时的回顾和总结，发现问题已经晚了。 2017年，对自己狠一点，fighting！","categories":[{"name":"总结","slug":"总结","permalink":"http://guowensheng.com/categories/%E6%80%BB%E7%BB%93/"}],"tags":[{"name":"年终总结","slug":"年终总结","permalink":"http://guowensheng.com/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"}]},{"title":"2016年书单","slug":"2017-01-30-2016-year-book-list","date":"2017-01-29T16:34:05.000Z","updated":"2020-03-20T13:09:26.924Z","comments":true,"path":"posts/2017-01-30-2016-year-book-list/","link":"","permalink":"http://guowensheng.com/posts/2017-01-30-2016-year-book-list/","excerpt":"《洗脑术：怎样有逻辑地说服他人》，要做给别人洗脑的人。 《经济学原理》，终于能看懂点财经新闻了。 《人类简史：从动物到上帝》，了解人类的过去现在和将来。 《重来：更为简单有效的商业思维》，短小精悍，一针见血，用做自省的checklist不错。 《白夜行》，不是那种酣畅淋漓，而是一直揪着你的心，有点阴暗，推荐。 《文明之光》，了解人类文明发展，震撼！ 《别以为你懂孩子的心》，看完了，脸肿了，如果从来没有认真想过教育小孩子这件事，会给你一个好的颠覆。 《引爆点：如何制造流行》，第一次看这方面的书，好像打开了新世界的大门，很解渴！ 《人件》，老书新看，如何让一帮人一起高效而愉快的工作，是永远的命题！ ​​​​ 《无价：洞悉大众心理玩转价格游戏","text":"《洗脑术：怎样有逻辑地说服他人》，要做给别人洗脑的人。 《经济学原理》，终于能看懂点财经新闻了。 《人类简史：从动物到上帝》，了解人类的过去现在和将来。 《重来：更为简单有效的商业思维》，短小精悍，一针见血，用做自省的checklist不错。 《白夜行》，不是那种酣畅淋漓，而是一直揪着你的心，有点阴暗，推荐。 《文明之光》，了解人类文明发展，震撼！ 《别以为你懂孩子的心》，看完了，脸肿了，如果从来没有认真想过教育小孩子这件事，会给你一个好的颠覆。 《引爆点：如何制造流行》，第一次看这方面的书，好像打开了新世界的大门，很解渴！ 《人件》，老书新看，如何让一帮人一起高效而愉快的工作，是永远的命题！ ​​​​ 《无价：洞悉大众心理玩转价格游戏》，了解价格背后的猫腻，锚定效应，行为经济学，不看还真不知道，好评！ 《定位：有史以来对美国营销影响最大的观念》，定位不是源于自身，而是生于他人的心智。 《阿西莫夫：神们自己》，这种风格不喜欢，核心内容就那么一点，着重在描写人物，果然还是硬核科幻适合我。","categories":[{"name":"阅读","slug":"阅读","permalink":"http://guowensheng.com/categories/%E9%98%85%E8%AF%BB/"}],"tags":[{"name":"书单","slug":"书单","permalink":"http://guowensheng.com/tags/%E4%B9%A6%E5%8D%95/"}]},{"title":"活得认真一点","slug":"2016-12-27-live-more-seriously","date":"2016-12-27T06:10:33.000Z","updated":"2020-03-20T13:09:26.925Z","comments":true,"path":"posts/2016-12-27-live-more-seriously/","link":"","permalink":"http://guowensheng.com/posts/2016-12-27-live-more-seriously/","excerpt":"30岁之后，身体明显跟之前不一样了，简单点说就是不抗造了。熬夜之后要缓好几天，懒觉基本睡不过8点，剧烈运动之后肌肉要酸好久，上一天班会感觉特别疲劳，动不动就这疼那疼，不能吃也不能喝了……这让我深深的意识到，我他妈的已经开始老了。面对这个难以接受又不得不接受的事实，我觉得应该多爱护一下自己，活得认真一点。 膝盖 之前酷爱踢球，组了个球队，参加联赛，踢了一年，膝盖不行了，现在挂靴快一年，还没好利索。踢球这一年我一共买了三双球鞋，鞋钉分别是HG、AG、TF。当第三双TF到货的时候，膝盖的疼痛已经严重影响到了正常生活，无奈挂靴。其实，根据场地条件来选择球鞋是非常重要的，否则压力都转移到了膝盖上，当你发现疼痛的时候已经晚了。之后到医院做了核磁，大夫说：“有积液，软骨磨损，后十字韧带退化，不算太严重。","text":"30岁之后，身体明显跟之前不一样了，简单点说就是不抗造了。熬夜之后要缓好几天，懒觉基本睡不过8点，剧烈运动之后肌肉要酸好久，上一天班会感觉特别疲劳，动不动就这疼那疼，不能吃也不能喝了……这让我深深的意识到，我他妈的已经开始老了。面对这个难以接受又不得不接受的事实，我觉得应该多爱护一下自己，活得认真一点。 膝盖之前酷爱踢球，组了个球队，参加联赛，踢了一年，膝盖不行了，现在挂靴快一年，还没好利索。踢球这一年我一共买了三双球鞋，鞋钉分别是HG、AG、TF。当第三双TF到货的时候，膝盖的疼痛已经严重影响到了正常生活，无奈挂靴。其实，根据场地条件来选择球鞋是非常重要的，否则压力都转移到了膝盖上，当你发现疼痛的时候已经晚了。之后到医院做了核磁，大夫说：“有积液，软骨磨损，后十字韧带退化，不算太严重。”我觉得既然不太严重，回家养养就好了。就这样一直没太当回事，忍着疼痛，恢复了半年都没见好转。后来又开始坚持看病吃药，现在才有所好转。 如果一开始就穿TF踢球，注意大腿肌肉的锻炼，应该不至于膝盖受损。如果一开始就坚持看病吃药，应该不至于这么长时间都没恢复。现在乖乖的锻炼大腿，吃维骨力，杜绝剧烈运动，期待尽快好起来吧。 各位热爱运动的父老乡亲们，装配一定配齐了配对了，在能力范围内选择最好的。护具不要等受了损伤再带，提前预防，别怕人笑话。规规矩矩做好热身，尤其冬天，不热身太容易受伤。尽量延长自己的运动生命才是王道。 膝盖是人体最复杂也是最重要的关节，坏了不好恢复，年轻时不注意，老了以后会非常痛苦。且行且珍惜！ 牙齿牙齿一直都没啥毛病 ，忽然有一天发现智齿有点蛀牙的迹象，虽然不疼，还是上医院看了看。没啥大问题，因为是智齿，所以也不建议治疗，以后有问题拔掉就好了，然后告知一些牙齿保护技巧，洗了个牙了事。 我开始注意到，身边很多人牙齿都有问题，治疗起来非常痛苦，关键还挺贵。反省了一下自己的牙齿，也就早晚刷两次，刷的方法不对，刷的时间也不够。牙齿这东西，一辈子就这一副，坏了只能修修补补，修了之后还没原装的好用。而且民以食为天，一日三餐都要用到，坏了之后严重影响生活品质。吃饭不香了，生活还有啥乐趣呢？ 买个好点的电动牙刷，定期更换刷头，用巴氏刷牙法，时间在两分钟以上，用牙线清理牙缝。选个味道不错的漱口水，三餐后记得漱口30秒。每年至少去洗一次牙，跟大夫聊聊，看看有啥问题。帮自己的孩子养成这样的习惯。 肺现在雾霾天戴口罩大部分人都可以做到，但是请注意一下口罩的规格，KN95的才能防PM2.5好不好。更不用说那些只能保暖的布口罩了，如果不每天清洗的话，还不如不戴。有些人从来不戴口罩，甚至大雾霾天还带着孩子出去溜达，那些孩子是真的小，甚至还在襁褓之中，真替他们心痛。我最佩服的还是那些在雾霾天坚持运动的人们，顶着爆表的空气指数在球场上挥汗如雨，真是用生命在捍卫自己的爱好，兄弟，国足欠你们一个肺！ 室内空气也不能忽视，买个便携的检测器在屋里溜一圈，基本上是外面重度污染屋里中度污染的程度。所以净化器还是必不可少的，最好买个能显示空气指数的，这样心里才能有个数。公司应该把室内空气指数作为一个基本要求，更多的体现出对员工的关怀，这样大家才能安心的工作。公司不给买，大伙凑钱买，没人凑钱买，咱就自己买，不要计较太多，自己的肺最重要。如果在一个几十上百人的大办公室里只有你一个人愿意买净化器，还是换个工作吧，你不属于这里。因为空气移民的大有人在，更何况一份工作。车里的空气也是一样的，整个PM2.5的空调滤芯，放个车载净化器，实在不行就带着口罩开车吧。否则单凭在室外戴口罩的那点时间，自己琢磨琢磨就知道了。 我不吸烟，不太有发言权，但是还得说说。现在开始流行电子烟，雾化烟油那种，我觉得应该比吸烟卷强点，据说是没有焦油和燃烧物，没考证过，烟民可以研究一下。不过还是不吸烟最好，自己对自己的肺负责吧。 胃这年头没有胃病都不好意思跟人家打招呼，经历过多年胃痛洗礼的人自然有其保养方法，该说的大夫都会说，就不重复了。我想说一点，建议去查查幽门螺杆菌，如果有，吃药除了。之前去医院跟大夫说要除幽门螺杆菌，大夫说：“家族要是没有胃癌病史不用除，要不得好几种药一起吃，有副作用。”一听副作用，当时怕了，现在后悔了，准备有时间去除了。我觉得这玩意是万恶之源，胃病总是反复的犯，除了之后有问题再说。 脊椎这个话题跟胃一样俗，不用说大家都知道该怎么办，今年我有一些新的体会。一般人都是疼了治，治了好，好了忘，忘了再疼，这么一个循环。我也是这样，因为生活习惯是很难改变的，想调整坐卧立走的姿势，如果不是时时刻刻想着，分分钟就现原形。怎么补救能呢？找个信任的大夫，定期去做按摩治疗，疼了就多去几次，不疼了就少去几次，不要间断，让自己的脊柱一直保持良好的状态。汽车还需要定期保养呢，好好对待自己。 活得认真一点没有坏处，不要过度挥霍自己，出来混迟早是要还的。","categories":[{"name":"思考","slug":"思考","permalink":"http://guowensheng.com/categories/%E6%80%9D%E8%80%83/"}],"tags":[{"name":"生活","slug":"生活","permalink":"http://guowensheng.com/tags/%E7%94%9F%E6%B4%BB/"}]},{"title":"揭开密码学的面纱","slug":"2016-09-27-unveiling-the-veil-of-cryptography","date":"2016-09-27T06:57:51.000Z","updated":"2020-03-20T13:09:26.924Z","comments":true,"path":"posts/2016-09-27-unveiling-the-veil-of-cryptography/","link":"","permalink":"http://guowensheng.com/posts/2016-09-27-unveiling-the-veil-of-cryptography/","excerpt":"本来是研究区块链来着，遇到一些密码学的知识不甚了解， 影响到了整体的学习效果，所以决定恶补一下密码学，不求深入，但求浅出。 提起密码学，大部分人会想起谍战，像电影《风声》，想起谜题，像电影《达芬奇密码》。只要不想起用户名，咱们就能继续往下聊。普通人认识的密码学基本都属于古典密码学的范畴，相对于古典密码学就必然有现代密码学，那么他们到底是怎么回事呢？不用说普通人，就算是搞计算机的，如果不专门研究一下，也不一定说的清楚。 古典密码学 简单的说，古典密码学就是研究如何用别人不懂的方式进行沟通的一种科学，主要着眼于将普通信息（明文）转换成难以理解的数据（密文）的过程及其逆向过程，即加密和解密。在这里我们定义三种角色，信息发送者负责信息加密，信息接受者负责信息解密， 窃听者负责信息破译，后面","text":"本来是研究区块链来着，遇到一些密码学的知识不甚了解， 影响到了整体的学习效果，所以决定恶补一下密码学，不求深入，但求浅出。 提起密码学，大部分人会想起谍战，像电影《风声》，想起谜题，像电影《达芬奇密码》。只要不想起用户名，咱们就能继续往下聊。普通人认识的密码学基本都属于古典密码学的范畴，相对于古典密码学就必然有现代密码学，那么他们到底是怎么回事呢？不用说普通人，就算是搞计算机的，如果不专门研究一下，也不一定说的清楚。 古典密码学 简单的说，古典密码学就是研究如何用别人不懂的方式进行沟通的一种科学，主要着眼于将普通信息（明文）转换成难以理解的数据（密文）的过程及其逆向过程，即加密和解密。在这里我们定义三种角色，信息发送者负责信息加密，信息接受者负责信息解密， 窃听者负责信息破译，后面用Alice、Bob和Eve代替。为什么这么取名？请参考 Alice 和 Bob 的故事。 举个例子，Alice、Bob和Eve都是英国人，Alice和Bob懂法语，Eve不懂法语。那么Alice和Bob有啥小秘密直接用法语交流就行了。Alice将英语（明文）转换为法语（密文）的过程就是加密，Bob将法语（密文）转换成英语（明文）的过程就是解密，Eve不懂法语所以不知道他俩说的啥。这里我们不考虑Alice和Bob如何传递密文，以及Eve如何获取密文，那些都是谍战剧的任务，总之Eve总是能获得密文的。但是如果Eve学习了法语或者找到个懂法语的人帮忙，那么Eve就能够很简单的将法语翻译成英文，即破译密文。法语知道的人有点多，换种小众的语言吧，非洲的斯瓦斯里语？魔戒的精灵语？无论多么小众的语言只要是公开的就没有意义，总能找到会的人。 必须找到一种只有Alice和Bob两个人知道的方法，用找到可能不是特别恰当，应该用发明，只有这样才能保证只有他们两个知道，并且这种方法必须让Eve难以破译。凯撒密码，将明文的每一个字母在字母表上向后或向前按照一个固定数目进行偏移后被替换成密文，比如每个字母用下一个字母替换，ni hao -&gt; oj ibp。转置式密码，将明文的每一个字母按照一定的规则变换位置形成密文，比如每两个相邻的字母交换位置，ni hao -&gt; in aho。替换式密码，将明文按照一定的规则（密码本）替换成密文，比如ni hao -&gt; ■ ◆。这些方法都很巧妙，如果不知道规则，无法第一时间破译。但是道高一尺魔高一丈，只要花些时间，窃听者Eve总会找到办法。对于凯撒密码和转置式密码，可以用暴力破解来破译，将所有可能的位移都尝试一遍，将所有可能的位置变换都尝试一遍。对于替换式密码，可以进行频率分析来破译，将密文每个符号的出现频率和一篇正常文章中字母出现的频率进行对比破译。 古典密码学，主要以语言学为基础，无论是发明还是破译都依靠于人类的智慧技巧与创造力。到了现代，由于计算机的飞速发展，计算能力成几何倍数的增长，古典密码学已经不再适用，其破解成本在计算机面前显得微不足道。拥有强大计算能力的计算机淘汰了古典密码学，与此同时又催生了现代密码学。 现代密码学 不同于古典密码学主要考虑语言学上的模式，现代密码学是以数学为基础的，借助计算机强大的计算能力已经无法被人力所破解。除了机密性，在数据完整性、身份认证和不可抵赖性等方面均有很好的表现，突破了古典密码学的局限性，拥有更广阔的空间。 密钥古典密码学关注于算法本身，如果算法的细节泄露了，算法也就失效了。而现代密码学则不同，一般算法的细节都是公开的，通过不同的输入参数来进行加密和解密，这个参数就被称作密钥。相同的明文和相同的算法配上不同的密钥，加密得出的密文是完全不同的。同样，解密时也必须使用与加密密钥相对应的解密密钥才能得出正确的明文。加密密钥和解密密钥是成对出现的，在有的算法中他们是相同的，有的则不同。 对称密钥用相同的密钥进行加密和解密，称之为对称密钥。信息发送者和接受者保有相同的密钥，所以又叫共享密钥。1977年美国标准与技术研究院（NIST）将DES定为国家标准，密钥长64位，除去8位用来奇偶校验，实际只有56位。随着计算机的发展，56位密钥的强度日益减弱。1999年NIST将3DES定为过渡加密标准，从字面上可以猜出，3DES是用3条56位密钥对数据进行3次DES操作，以弥补56位密钥的强度不足的情况。但这三次操作并不是简单的三次加密配三次解密，而是加密解密加密配上解密加密解密的组合，详情见维基百科。2002年NIST制定了新的高级加密标准AES，有兴趣可以研究一下Rijndael算法。 这里有一个有趣的悖论，对称密钥算法的密钥是如何传播的，如何保证其安全性。如果密钥有其他方法可以保证安全传播，那么直接用那个方法就好了，还要这个算法干嘛？如果密钥无法保证安全传播，那么这个算法也就毫无意义了！ 非对称密钥用不同的密钥进行加密和解密，称之为非对称密钥，其中一个是公开的叫做公钥，一个是私密的叫做私钥，所以又叫公开密钥。在加密的场景下，公钥加密私钥解密。在数字签名的场景下，私钥加密公钥验证。 大名鼎鼎的RSA就不多说了，网上有的是资料，这里推荐阮一峰老师写的科普文章。RSA算法原理（一）RSA算法原理（二） 数字摘要数字摘要是将任意长度的数据处理为固定长度的数据，不同的输入数据产生不同的输出数据，相同的输入数据产生相同的输出数据，并且该过程不可逆。这样的一个函数，我们称之为单向散列函数或Hash函数，通过明文生成的密文，我们称之为数字摘要或数字指纹。就如同指纹可以代表一个人一样，数字指纹也可以代表明文。数字摘要技术可以用来验证数据的完整性，如文件下载通常会提供原文件的数字指纹，下载后只需要比较数字指纹就可以知道下载的文件是否正确。目前使用的比较广泛的散列函数，MD5和SHA-1。 数字签名顾名思义数字签名就是用数字的方式达到在纸上签名的效果，用来证明信息发送者的身份，主要利用了非对称密钥和数字摘要两项技术。 通常，Alice将信息生成数字摘要，然后将数字摘要用私钥加密，将信息和密文（数字摘要密文）一起传给Bob。Bob用同样的Hash函数将收到的信息生成Bob的数字摘要，然后用公钥将密文解密得出Alice的数字摘要，验证两个数字摘要是否一致，即可验证发信人的身份是否为Alice。 DSA同样是非对称密钥，但常常与RSA混淆，特别做一下区分。DSA是数字签名算法，只能用作数字签名，不能用作加密。因为DSA算法用私钥生成数字签名，用公钥验证，验证的过程不会将签名还原成原文。RSA既可以用作数字签名，也可以用作加密。因为RSA算法的公钥和私钥都可以用来加密和解密，可以产生数字签名的效果。 ECDSA就是比特币里面用的签名算法，协议框架和DSA基本一致，只不过ECDSA使用的椭圆函数域，而DSA使用普通乘法域。 混合秘钥系统非对称密钥算法比对称密钥算法慢，对称密钥算法的密钥管理又存在问题，所以常常将他们混合起来应用。非对称密钥用来保护和分发会话密钥，会话密钥用在对称密钥算法中，对通信消息进行保密。整个通讯过程既安全又高效。 例，Bob将他的公开密钥发给Alice。Alice产生随机会话密钥K，用Bob的公开密钥加密，并把加密的密钥EB(K)送给Bob。Bob用他的私人密钥解密Alice的消息，恢复出会话密钥：DB(EB(K))=K。他们两人用同一个会话密钥对他们的通信消息进行加密。 最后，本文勉强算是科普文章，只是说要解开面纱，并没有要深入剖析，所以算法的细节一概没提。精力有限，期待有缘人吧。推荐一本书，《图解密码技术 第三版》，豆瓣评分很高，虽然只看过目录，应该有助于进一步学习。","categories":[{"name":"技术","slug":"技术","permalink":"http://guowensheng.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Cryptography","slug":"Cryptography","permalink":"http://guowensheng.com/tags/Cryptography/"}]},{"title":"Node.js之异步那些事","slug":"2016-06-01-asynchronous-things-of-nodejs","date":"2016-06-01T05:27:39.000Z","updated":"2020-03-20T13:09:26.924Z","comments":true,"path":"posts/2016-06-01-asynchronous-things-of-nodejs/","link":"","permalink":"http://guowensheng.com/posts/2016-06-01-asynchronous-things-of-nodejs/","excerpt":"Node.js® is a JavaScript runtime built on Chrome’s V8 JavaScript engine. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient. Node.js官网上的介绍，其中事件驱动非阻塞I/O模型是被大家所津津乐道的，但是有多少人真正了解其究竟呢？有人可能会想到libuv，没错，libuv确实是其幕后英雄。那么问题又来了，到底是怎么用libuv实现的呢？下面我们来一探究竟。 libuv当初主要就是为Node.js开发的，提供跨平台的事件驱动异步I/O能力，当然现在肯定不仅限于Node.js使","text":"Node.js® is a JavaScript runtime built on Chrome’s V8 JavaScript engine. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient. Node.js官网上的介绍，其中事件驱动非阻塞I/O模型是被大家所津津乐道的，但是有多少人真正了解其究竟呢？有人可能会想到libuv，没错，libuv确实是其幕后英雄。那么问题又来了，到底是怎么用libuv实现的呢？下面我们来一探究竟。 libuv当初主要就是为Node.js开发的，提供跨平台的事件驱动异步I/O能力，当然现在肯定不仅限于Node.js使用。我们先来看一下libuv的Design overview。 从架构图上看，libuv是对多个平台上的事件驱动异步I/O库进行了封装，如Linux下的epoll、FreeBSD下的kqueue、Solaris下的event ports、Windows下的IOCP。 上图所描述的事件循环是libuv中最重要的概念，其中的Poll for I/O就是事件驱动异步I/O能力的核心。到这里我们有必要先了解一些基础知识，Linux IO模式及 select、poll、epoll详解，否则后面的东西就不是特别好理解了。 正题 经过前面的学习，应该对libuv有了一个整体的印象，总结一下， libuv其实就是把各种handle和io_watcher放到事件循环里，然后每一次循环都去检查一下是否有他们关心的事件需要处理，有则调用相应的callback，没有则继续循环。要想弄清楚Node.js之异步那些事，我们需要关心的是，Node.js如何运行事件循环，何时把handle和io_watcher放入事件循环，以及如何调用相应的callback。 开始之前，本次分析的代码版本为Node.js v0.12.6，Linux平台。 Runnode.cc中Start方法运行事件循环，精华部分如下。唯一有些特别的地方就是，在一个while循环中包了两个uv_run，模式分别是UV_RUN_ONCE和UV_RUN_NOWAIT，其原因在中间的两行注释中已经说得很明白了。 ... bool more; do &#123; more &#x3D; uv_run(env-&gt;event_loop(), UV_RUN_ONCE); if (more &#x3D;&#x3D; false) &#123; EmitBeforeExit(env); &#x2F;&#x2F; Emit &#96;beforeExit&#96; if the loop became alive either after emitting &#x2F;&#x2F; event, or after running some callbacks. more &#x3D; uv_loop_alive(env-&gt;event_loop()); if (uv_run(env-&gt;event_loop(), UV_RUN_NOWAIT) !&#x3D; 0) more &#x3D; true; &#125; &#125; while (more &#x3D;&#x3D; true);... 然后我们可以看看core.c中uv_run方法的代码，跟上面事件循环的流程图是可以一一对应的。 Data Structure继续看代码之前，有必要先了解一下重要的数据结构和相互的关系，以便更好的理解。 io_watcher接着我之前文章Node.js之HelloWorld背后的大坑的思路，还拿Hello World举例子，跟libuv有关的代码都在tcp_warp.cc里面了。 TCPWrap::New stream.c中uv__stream_init方法有如下代码，将io_watcher的cb设置为uv__stream_io，fd设置为-1，这里只是在stream层面做的初始化设置，后面到tcp层面还会有相应的改变。 uv__io_init(&amp;stream-&gt;io_watcher, uv__stream_io, -1); TCPWrap::Bind tcp.c的maybe_new_socket方法中，uv__socket方法生成了新的fd，uv__stream_open方法将其设置到io_watcher的fd。 TCPWrap::Listen tcp.c的uv_tcp_listen方法中有如下代码，将io_watcher的cb设置为uv__server_io，uv__server_io里面会调用connection_cb，connection_cb已经被设置为cb，而这个cb正是tcp_wrap.cc中的TCPWrap::OnConnection方法。 ... tcp-&gt;connection_cb &#x3D; cb; &#x2F;* Start listening for connections. *&#x2F; tcp-&gt;io_watcher.cb &#x3D; uv__server_io; uv__io_start(tcp-&gt;loop, &amp;tcp-&gt;io_watcher, UV__POLLIN);... core.c中uv__io_start方法有如下代码，利用void* watcher_queue[2]变量将io_watcher加入到uv_loop_t的队列中去，具体操作详见queue.h。将uv_loop_t的uv__io_t** watchers当做数组使用，fd为下标，io_watcher为对应的值。 ... if (QUEUE_EMPTY(&amp;w-&gt;watcher_queue)) QUEUE_INSERT_TAIL(&amp;loop-&gt;watcher_queue, &amp;w-&gt;watcher_queue); if (loop-&gt;watchers[w-&gt;fd] &#x3D;&#x3D; NULL) &#123; loop-&gt;watchers[w-&gt;fd] &#x3D; w; loop-&gt;nfds++; &#125;... uv__io_polllinux-core.c中的uv__io_poll方法，一行一行的读就可以了，前面的铺垫已经做得很充分了，只要读懂谜底便可揭晓。 未完 接下来我们来说说process.nextTick(callback)的事，在node.js中定义如下，把callback放到了nextTickQueue队列中，那么Node.js是在什么时候消费这个队列的呢？ function nextTick(callback) &#123; &#x2F;&#x2F; on the way out, don&#39;t bother. it won&#39;t get fired anyway. if (process._exiting) return; var obj &#x3D; &#123; callback: callback, domain: process.domain || null &#125;; nextTickQueue.push(obj); tickInfo[kLength]++;&#125; tcp_wrap.cc中TCPWrap::OnConnection方法有如下代码，MakeCallback方法的出处如下图。 tcp_wrap-&gt;MakeCallback(env-&gt;onconnection_string(), ARRAY_SIZE(argv), argv); async-wrap.cc中MakeCallback方法有如下代码。 env()-&gt;tick_callback_function()-&gt;Call(process, 0, NULL); node.cc中SetupNextTick方法有如下代码，对tick_callback_function()进行了设定。 env-&gt;set_tick_callback_function(args[1].As&lt;Function&gt;()); node.cc中SetupProcessObject方法有如下代码，SetupNextTick被设定为process中的_setupNextTick方法。 NODE_SET_METHOD(process, &quot;_setupNextTick&quot;, SetupNextTick); node.js中startup.processNextTick方法有如下代码。 process._setupNextTick(tickInfo, _tickCallback, _runMicrotasks); node.js中_tickCallback方法代码如下，消费nextTickQueue队列中的callback方法。 function _tickCallback() &#123; var callback, threw, tock; scheduleMicrotasks(); while (tickInfo[kIndex] &lt; tickInfo[kLength]) &#123; tock &#x3D; nextTickQueue[tickInfo[kIndex]++]; callback &#x3D; tock.callback; threw &#x3D; true; try &#123; callback(); threw &#x3D; false; &#125; finally &#123; if (threw) tickDone(); &#125; if (1e4 &lt; tickInfo[kIndex]) tickDone(); &#125; tickDone();&#125; 省略去中间步骤，实际上是产生了如下的调用关系。 TCPWrap::OnConnection()↓↓↓_tickCallback() 总结 简单说，整个过程是这样的，事件循环中有相应I/O事件发生的时候，libuv调用Node.js C++部分的回调，C++部分调用JavaScript部分的回调，顺便调用nextTick设定的回调。 还是认真读代码吧，以上写的仅供参考。","categories":[{"name":"技术","slug":"技术","permalink":"http://guowensheng.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://guowensheng.com/tags/Node-js/"},{"name":"libuv","slug":"libuv","permalink":"http://guowensheng.com/tags/libuv/"},{"name":"Async","slug":"Async","permalink":"http://guowensheng.com/tags/Async/"}]},{"title":"字符，字符集，字符编码","slug":"2016-03-09-char-charset-charencoding","date":"2016-03-09T02:12:43.000Z","updated":"2020-03-20T13:09:26.925Z","comments":true,"path":"posts/2016-03-09-char-charset-charencoding/","link":"","permalink":"http://guowensheng.com/posts/2016-03-09-char-charset-charencoding/","excerpt":"现在Unicode已然一统天下，我想很多年轻的程序员可能都没遇到过编码问题，更不用说了解编码的发展了。前些日子在一个老网站上偶遇乱码，虽然入行时间不短，但对其究竟也是不甚了解，好奇心驱使下落入深坑。还好经过一段时间的摸爬滚打，边学边写，总算大概理清了个脉络，记录之，分享之。 概念 字符是一个信息单位，在计算机里面，一个中文汉字是一个字符，一个英文字母是一个字符，一个阿拉伯数字是一个字符，一个标点符号也是一个字符。 字符集是字符组成的集合，通常以二维表的形式存在，二维表的内容和大小是由使用者的语言而定，是英语，是汉语，还是阿拉伯语。 字符编码是把字符集中的字符编码为特定的二进制数，以便在计算机中存储。编码方式一般就是对二维表的横纵坐标进行变换的算法。一般都比较简单，直接把横纵坐标拼","text":"现在Unicode已然一统天下，我想很多年轻的程序员可能都没遇到过编码问题，更不用说了解编码的发展了。前些日子在一个老网站上偶遇乱码，虽然入行时间不短，但对其究竟也是不甚了解，好奇心驱使下落入深坑。还好经过一段时间的摸爬滚打，边学边写，总算大概理清了个脉络，记录之，分享之。 概念 字符是一个信息单位，在计算机里面，一个中文汉字是一个字符，一个英文字母是一个字符，一个阿拉伯数字是一个字符，一个标点符号也是一个字符。 字符集是字符组成的集合，通常以二维表的形式存在，二维表的内容和大小是由使用者的语言而定，是英语，是汉语，还是阿拉伯语。 字符编码是把字符集中的字符编码为特定的二进制数，以便在计算机中存储。编码方式一般就是对二维表的横纵坐标进行变换的算法。一般都比较简单，直接把横纵坐标拼一起就完事了。后来随着字符集的不断扩大，为了节省存储空间，才出现了各种各样的算法。 字符集和字符编码一般都是成对出现的，如ASCII、IOS-8859-1、GB2312、GBK，都是即表示了字符集又表示了对应的字符编码，以后统称为编码。Unicode比较特殊，后面细说。 发展 单字节计算机是美国人发明的，人家用的是美式英语，字符比较少，所以一开始就设计了一个不大的二维表，128个字符，取名叫ASCII（American Standard Code for Information Interchange）。128个码位，用7位二进制数表示，由于计算机1个字节是8位二进制数，所以最高位为0，即00000000-01111111或0x00-0x7F。 后来美国人发现128个码位不够用，于是在原来二维表的基础上进行了扩展，256个字符，取名叫EASCII（Extended ASCII）。256个码位，用8位二进制数表示，即00000000-11111111或0x00-0xFF。 当计算机传到了欧洲，美国人的标准不适用了，但是改改还能凑合。于是国际标准化组织在ASCII的基础上进行了扩展，形成了ISO-8859标准，跟EASCII类似，兼容ASCII，在高128个码位上有所区别。但是由于欧洲的语言环境十分复杂，所以根据各地区的语言又形成了很多子标准，ISO-8859-1、ISO-8859-2、ISO-8859-3、……、ISO-8859-16，真是令人发指。 双字节当计算机传到了亚洲，尤其是东亚，国际标准被秒杀了，路边小孩随便说句话，256个码位就不够用了。于是乎继续扩大二维表，单字节改双字节，16位二进制数，65536个码位。在不同国家和地区又出现了很多编码，大陆的GB2312、港台的BIG5、日本的Shift JIS等等。 注意65536个码位这种说法只是理想情况，由于双字节编码可以是变长的，也就是说同一个编码里面有些字符是单字节表示，有些字符是双字节表示。这样做的好处是，一方面可以兼容ASCII，另一方面可以节省存储容量，代价就是会损失一部分码位。而且编码的设计也并不是想象的那样，所有字符从头到尾布满整个二维表，都是有预留空间的。比如说GBK是GB2312的扩展（K竟然是拼音KuoZhan的缩写），按理说都属于双字节编码，码位是一样的，根本谈不上扩展，但实际上是预留空间在起作用。比如下图为GBK的编码空间，GBK/1、GBK/2是GB2312的区域，GBK/3、GBK/4、GBK/5是GBK的区域，红色是用户自定义区域，白色可能就是由于变长编码损失的区域了。 Unicode当互联网席卷了全球，地域限制被打破了，不同国家和地区的计算机在交换数据的过程中，就会出现乱码的问题，跟语言上的地理隔离差不多。乱码是怎么出现的呢？对同一组二进制数据，不同的编码会解析出不同的字符，用对了编码，解析出来的字符组成的文字是有意义的，用错了编码，解析出来的字符组成的文字是没意义的，也就是通常所说的乱码。 经过之前的介绍，编码很多，全球的计算机们没办法在一起好好的玩耍。要彻底解决这个问题，替代原先基于语言的编码系统，就需要一个通用的字符集UCS（Universal Character Set）和一个通用的字符编码Unicode。一开始UCS用2个字节表示，叫做UCS-2，后来2个字节不够用，于是就用4个字节，叫做UCS-4。但是如果每一个字符都用4个字节来表示的话，相较之前的编码会浪费很多存储空间，尤其是相对ASCII等单字节编码会非常吃亏。并且当时已经有些厂商在双字节编码上投入了很大的精力。于是UTF-16就被作为一种折中的方案提了出来，既保持了两字节不变，又保证了足够的编码空间。而UTF-32是与UCS-4相对应的，UTF-8则由于扩展性比较强，从容应对了UCS-2到UCS-4的改变。关于各种UTF的实现细节可以点击链接查看（翻墙），已经说得很清楚了，就不赘述了，但不得不提一下，UTF-16的设计还挺巧妙的。 UTF（Unicode Transformation Format）是将Unicode编码进行了转换，通常会在存储空间和效率上进行一定的权衡，有很多种实现方式，前面提到了UTF-8和UTF-16是最常用的。这就是之前提到的Unicode的特殊之处。 历史 ASCII1960 开发1963 发布1986 最后一次更新 ISO-8859-11998 发布 GB23121980 发布 GBK1993 发布 UCS-2In the late 1980s Unicode1987 开发1991 发布1996 实现代理机制（UTF-16）2015 最新版8.0 UTF-81993 发布2008 流行 UTF-161996 开发2000 发布 根据以上各个编码发展的一些时间节点，再配合下图UTF-8制霸互联网过程，会有一个比较清晰的了解。 尾声 虽然Unicode解决了地球上的问题，但是以后三体人入侵可怎么办，根据这些天研究编码发展历史来看，比较靠谱的回答——还是到时再说吧。 本文是根据互联网上各种信息来源，主要是维基百科，加上自己的理解，进行的总结和演绎，肯定有不准确或错误的地方，还望不吝赐教。","categories":[{"name":"技术","slug":"技术","permalink":"http://guowensheng.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Encoding","slug":"Encoding","permalink":"http://guowensheng.com/tags/Encoding/"}]},{"title":"2015年总结","slug":"2016-02-03-2015-year-summary","date":"2016-02-03T02:08:09.000Z","updated":"2020-02-28T14:33:06.918Z","comments":true,"path":"posts/2016-02-03-2015-year-summary/","link":"","permalink":"http://guowensheng.com/posts/2016-02-03-2015-year-summary/","excerpt":"读书 “要么旅行，要么读书，身体和灵魂，必须有一个在路上。”受这句话的影响，今年开始读书了。前半年，还需要利用任务工具，每天强制自己读书。后半年，已然养成习惯，摆脱了工具束缚，有时间便会看上两眼。11本书，325万字，成绩还算满意，但自己深知读书不在多，在感悟。书单上看，都是畅销书，也没什么侧重点，从量变到质变关键在于积累，总之先坚持读下去。从效果上看，真的不一样了，整个人的思维都慢慢变化了，用书中知识来改变生活的感觉，好极了。真的后悔，小时候竟然以不爱读书为荣，真是年少无知，要是从小学便开始读书，现在肯定会不同的。不过也没什么，以后多读便是了。女儿1岁多了，早教她认字，早让她读书，不让她后悔。 写作 开始写作是因为研究了一些技术得记录下来，在这个过程中发现，把知识更系统的整理出来，分享出","text":"读书“要么旅行，要么读书，身体和灵魂，必须有一个在路上。”受这句话的影响，今年开始读书了。前半年，还需要利用任务工具，每天强制自己读书。后半年，已然养成习惯，摆脱了工具束缚，有时间便会看上两眼。11本书，325万字，成绩还算满意，但自己深知读书不在多，在感悟。书单上看，都是畅销书，也没什么侧重点，从量变到质变关键在于积累，总之先坚持读下去。从效果上看，真的不一样了，整个人的思维都慢慢变化了，用书中知识来改变生活的感觉，好极了。真的后悔，小时候竟然以不爱读书为荣，真是年少无知，要是从小学便开始读书，现在肯定会不同的。不过也没什么，以后多读便是了。女儿1岁多了，早教她认字，早让她读书，不让她后悔。 写作开始写作是因为研究了一些技术得记录下来，在这个过程中发现，把知识更系统的整理出来，分享出去，获得反馈，是一件非常快乐的事情。从技术上来讲，自己学会了跟写出来让别人明白，完全是不同维度上的事情。要写出来，便有更多细节需要反复雕琢，不能有一丁点囫囵，虽然要花很多的时间，但绝对值得。自己辛苦写出来的东西，分享出去，属于程序员的情怀，若是能得到大家的好评，更是强劲的动力。通过在各大主流技术社区分享技术文章，开始有意识的经营自己，有的文章已经可以登上其首页头条，简书上的阅读量、评论、喜欢、粉丝更是节节攀升，甚至还得到了一笔2元的打赏，成就感。除了技术文章，还写了一些心得体会，但明显不如技术受欢迎。不过这也没什么，说明自己的深度还不够，毕竟自己是做技术的，不是哲学家，写作从来也不是为了别人，多思考，多总结，自己有收获就够了。 健身每周一次的P90X腹肌撕裂者，坚持下来了，像读书一样已经养成习惯，不做不舒服斯基。本来配合每周一次的足球活动，形成一个完美的健身计划，奈何膝盖不争气，只能休战，可怜我那新买的狂战士2.0TF还没上脚。运动量不够怎么办，于是便买了对哑铃，单只30KG，买重了，至今还停留在10KG水平。虽然没有系统的训练，但在家有时间还是会来上两下的。这样坚持了一年，感受到了自身的变化，马甲线已然若隐若现，胳膊明显粗壮，更加可喜的是精神状态不一样了，更加自信了。只是由于膝盖的原因，大腿肌肉有些萎缩，急需恢复。准备好好学习下专业知识，系统训练，减脂配合增肌，甩掉一身肥肉，让那萌萌的小鲜肉重见天日。 工作部门人员从30+成长到60+，算是一个比较大的飞跃，制定了一套比较完整的职级评价体系，解决了如此发展之下的一些隐忧。虽然执行过程中磕磕绊绊，还有很多不完善的地方，不过还好有我的团队在，助我不断完善。为了更好的配合这个体系的运转，加强了项目间交流，组织了项目间走访和技术沙龙，谈管理，聊技术，效果不错。在助我实现一个个想法的同时，团队成员不断成长壮大自我突破，我很欣慰。接下来还有很多事要做，有你们相伴，我有信心，打造一支有影响力的团队，目标天津TOP1。职业发展方面，还是应该寻求突破，走出舒适区，外部没有机会就自己创造机会，自己创造不了机会就苦练内功，一定做到时刻准备着。另外，据反映我越来越爱讲道理了，这从侧面表现出我缺少倾听了，不管是有意无意的，得改，多输入，适当输出。 生活主旋律是奶孩子，虽然我自己没怎么奶吧，主要辛苦了我家媳妇和姥姥，爷爷每天给做饭也是功不可没，在他们的保护下，我保持了比较好的状态。多考虑别人的疾苦，才能更好的调整自己的心态，少惹他们生气，多承担些责任。多陪孩子玩，多给她拍照录像，少玩手机，毕竟她的童年就这些年，过去就回不来了，我得陪她。本来在家的时间就不多，大家还都围着孩子转，相互间的沟通似乎少了些，不好，得多说话，交流思想，交流感情。忽然发现父母自己觉得自己老了，开始关注自己的健康问题，开始乱买保健器械和保健品，这说明我对他们的关注太少了，要让他们感觉有所依靠。 总结一下，发现各个方面还是有很大进步空间的，fighting！","categories":[{"name":"总结","slug":"总结","permalink":"http://guowensheng.com/categories/%E6%80%BB%E7%BB%93/"}],"tags":[{"name":"年终总结","slug":"年终总结","permalink":"http://guowensheng.com/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"}]},{"title":"2015年书单","slug":"2016-02-02-2015-year-book-list","date":"2016-02-02T03:09:15.000Z","updated":"2020-03-20T13:09:26.924Z","comments":true,"path":"posts/2016-02-02-2015-year-book-list/","link":"","permalink":"http://guowensheng.com/posts/2016-02-02-2015-year-book-list/","excerpt":"三体，没啥可说的，没看过都不好意思跟人打招呼。 从0到1，讲创业的事情，说了很多以前没意识的事情，感觉一下子格局变了，确实开阔眼界。 失控，不老经典，20年前能有这样的思想，除了送上膝盖还能干嘛呢。不过，本书领域跨度略大，且反复举例说明其观点，本人水平有限，读起来实在很累。 极简欧洲史，大概了解一下欧洲历史，还是挺有趣的。 乌合之众，关于群体的剖析非常透彻，很多以前不理解没注意的事情都一下子豁然开朗了。 史蒂夫·乔布斯传，天使与恶魔的混合体，循规蹈矩的人无法改变世界。 时间简史，霍金大爷，实在跟不上您的思路，没看太懂。 上帝掷骰子吗：量子物理史话，浅显易懂，用通俗的语言即讲了科学又讲了八卦，“贵圈真乱”绝不仅限于当今娱乐圈。感叹物理学的发展主要靠的还","text":"三体，没啥可说的，没看过都不好意思跟人打招呼。 从0到1，讲创业的事情，说了很多以前没意识的事情，感觉一下子格局变了，确实开阔眼界。 失控，不老经典，20年前能有这样的思想，除了送上膝盖还能干嘛呢。不过，本书领域跨度略大，且反复举例说明其观点，本人水平有限，读起来实在很累。 极简欧洲史，大概了解一下欧洲历史，还是挺有趣的。 乌合之众，关于群体的剖析非常透彻，很多以前不理解没注意的事情都一下子豁然开朗了。 史蒂夫·乔布斯传，天使与恶魔的混合体，循规蹈矩的人无法改变世界。 时间简史，霍金大爷，实在跟不上您的思路，没看太懂。 上帝掷骰子吗：量子物理史话，浅显易懂，用通俗的语言即讲了科学又讲了八卦，“贵圈真乱”绝不仅限于当今娱乐圈。感叹物理学的发展主要靠的还是数学和哲学。 沃顿商学院最受欢迎的谈判课，谈判无处不在，处事讲究技巧，凡事多努力一分，就可能有不一样的结果，可以改变我一生的书！ 哲学家们都干了些什么，了解一下哲学史，了解一下人类思想的发展。 创业维艰：如何完成比难更难的事，如何当好CEO，全是干货，希望未来有机会一试。","categories":[{"name":"阅读","slug":"阅读","permalink":"http://guowensheng.com/categories/%E9%98%85%E8%AF%BB/"}],"tags":[{"name":"书单","slug":"书单","permalink":"http://guowensheng.com/tags/%E4%B9%A6%E5%8D%95/"}]},{"title":"别以为你只是在开会","slug":"2015-12-29-do-not-think-you-are-just-in-a-meeting","date":"2015-12-29T02:23:36.000Z","updated":"2020-03-20T13:09:26.924Z","comments":true,"path":"posts/2015-12-29-do-not-think-you-are-just-in-a-meeting/","link":"","permalink":"http://guowensheng.com/posts/2015-12-29-do-not-think-you-are-just-in-a-meeting/","excerpt":"关于开会的正确姿势，已经有无数文章讨论过了，比我理解深刻得多，就不班门弄斧了，唯独想说说开会的成本。那么开会的成本是什么？如何衡量？我喜欢的方式就是换算成钱，这是最直观的，最容易衡量的，也是最触目惊心的。 召集一帮人开会，所有人都是有成本的，可以从人民币/人月换算成人民币/人时。一共有多少人，开了多长时间，简单的加和，就可以算出来要花多少钱。这样一个会议就被量化了，每一分钟都可以兑换成真金白银，每浪费一分钟就会对应人民币的流失。举个鲜活的例子，全员大会100人，主要领导迟到10分钟，按1万/人月计算，1000多块钱没了。如果这个大会连开3个小时，所有参会人员昏昏欲睡，完全不知道说的什么，2万来块钱又没了。好像也没多少钱啊？你跟比尔盖茨开个会试试。 有了成本的概念之后，就可以直接用金钱来衡","text":"关于开会的正确姿势，已经有无数文章讨论过了，比我理解深刻得多，就不班门弄斧了，唯独想说说开会的成本。那么开会的成本是什么？如何衡量？我喜欢的方式就是换算成钱，这是最直观的，最容易衡量的，也是最触目惊心的。 召集一帮人开会，所有人都是有成本的，可以从人民币/人月换算成人民币/人时。一共有多少人，开了多长时间，简单的加和，就可以算出来要花多少钱。这样一个会议就被量化了，每一分钟都可以兑换成真金白银，每浪费一分钟就会对应人民币的流失。举个鲜活的例子，全员大会100人，主要领导迟到10分钟，按1万/人月计算，1000多块钱没了。如果这个大会连开3个小时，所有参会人员昏昏欲睡，完全不知道说的什么，2万来块钱又没了。好像也没多少钱啊？你跟比尔盖茨开个会试试。 有了成本的概念之后，就可以直接用金钱来衡量开会的效果了。开会之前一定要想好，我开这个会要花多少钱，要达到什么样的效果，没达到预期效果是不是就要赔钱了，怎样才能使会议的性价比最高等等。再举个例子，我要召开部门例会，各项目负责人向我汇报工作，一个人汇报时，其他人只能听着，但是大部分例行的工作内容其他人是不需要了解的，那么这个时间就浪费了，显然这样做性价比很低。 其实低效的会议不仅是浪费金钱那么简单，更要命的是会打断工作，影响心情，扼杀创造性。如果把宝贵的时间用在原本的工作中，所创造的价值其实是根本无法用金钱来衡量的。 最后，别轻易给程序员开会！","categories":[{"name":"思考","slug":"思考","permalink":"http://guowensheng.com/categories/%E6%80%9D%E8%80%83/"}],"tags":[{"name":"工作","slug":"工作","permalink":"http://guowensheng.com/tags/%E5%B7%A5%E4%BD%9C/"}]},{"title":"Docker之如何优雅的翻墙","slug":"2015-12-16-how-to-elegantly-turn-over-the-wall-with-docker","date":"2015-12-16T08:51:31.000Z","updated":"2020-03-20T13:09:26.924Z","comments":true,"path":"posts/2015-12-16-how-to-elegantly-turn-over-the-wall-with-docker/","link":"","permalink":"http://guowensheng.com/posts/2015-12-16-how-to-elegantly-turn-over-the-wall-with-docker/","excerpt":"翻墙的感觉你懂的，freedom，但翻墙的姿势多种多样，如何选择最优雅的一种，也是一门学问。可以选择VPN或者Shadowsocks，也可以选择购买或者自建。购买现成服务的话，优点是即买即用，方便便宜，但缺点是不稳定，要么有今天没明天的，要么网络像抽风一样的。自建服务的话，优点是自由度高，风险低，缺点是租用国外VPS比较贵，自建服务比较麻烦，更换VPS运营商更麻烦。 下面我来介绍一种自以为优雅的姿势，建好VPS之后，全程只需几条命令，耗时不到5分钟（视网络情况而定），即可实现各种翻墙。 VPS 首先购买VPS，选谁家的根据自己喜好，我选的DigitalOcean。付款用的Paypal，现在有中文版了，绑一张双币信用卡，很方便。然后建好虚拟机，登录进去，最好用SSH Key登录。 Doc","text":"翻墙的感觉你懂的，freedom，但翻墙的姿势多种多样，如何选择最优雅的一种，也是一门学问。可以选择VPN或者Shadowsocks，也可以选择购买或者自建。购买现成服务的话，优点是即买即用，方便便宜，但缺点是不稳定，要么有今天没明天的，要么网络像抽风一样的。自建服务的话，优点是自由度高，风险低，缺点是租用国外VPS比较贵，自建服务比较麻烦，更换VPS运营商更麻烦。 下面我来介绍一种自以为优雅的姿势，建好VPS之后，全程只需几条命令，耗时不到5分钟（视网络情况而定），即可实现各种翻墙。 VPS首先购买VPS，选谁家的根据自己喜好，我选的DigitalOcean。付款用的Paypal，现在有中文版了，绑一张双币信用卡，很方便。然后建好虚拟机，登录进去，最好用SSH Key登录。 Docker安装最新版本的Docker，只需一条命令。 % curl -sSL https:&#x2F;&#x2F;get.docker.com&#x2F; | sh VPN利用Docker安装VPN服务，只需一条命令，在执行命令之前需要先建立VPN账户密码文件，然后将以下命令中的{local_path_to_chap_secrets}部分替换为该文件路径，具体信息参照DockerHub mobtitude/vpn-pptp。 % docker run -d --privileged --net&#x3D;host -v &#123;local_path_to_chap_secrets&#125;:&#x2F;etc&#x2F;ppp&#x2F;chap-secrets mobtitude&#x2F;vpn-pptp Shadowsocks利用Docker安装Shadowsocks服务，同样只需一条命令，将以下命令中$SSPASSWORD部分替换为自己设定的密码，具体信息参照DockerHub oddrationale/docker-shadowsocks。 % docker run -d -p 1984:1984 oddrationale&#x2F;docker-shadowsocks -s 0.0.0.0 -p 1984 -k $SSPASSWORD -m aes-256-cfb 然后就没有然后了，尽情的翻滚吧~ 本文对于小白来说可能不太好理解，多了解一下黑体字相关的概念会大有帮助，但是我觉得在Docker的淫威之下，不理解硬做也问题不大，没错，Docker就是这么强，Docker大法好！","categories":[{"name":"技术","slug":"技术","permalink":"http://guowensheng.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"http://guowensheng.com/tags/Docker/"},{"name":"GFW","slug":"GFW","permalink":"http://guowensheng.com/tags/GFW/"}]},{"title":"Node.js之HelloWorld背后的大坑2","slug":"2015-11-06-the-big-pit-behind-nodejs-hello-world-2","date":"2015-11-06T07:34:01.000Z","updated":"2020-03-20T13:09:26.924Z","comments":true,"path":"posts/2015-11-06-the-big-pit-behind-nodejs-hello-world-2/","link":"","permalink":"http://guowensheng.com/posts/2015-11-06-the-big-pit-behind-nodejs-hello-world-2/","excerpt":"填坑 上一篇文章留了个扣子，本来不想继续写的，因为这样写实在是又累又耗时间。而且中间Node.js还发布了v4.0.0版本，一下子没动力了有木有，人家v4.0.0都发布了，我还分析v0.12.7干吗？于是便在这段时间写了两篇自我感觉良好的小文，奈何文笔太差，完全没人看。倍受打击之余，默默的在多看上买了一套《诺贝尔文学奖作品典藏书系（共28册）》，至今还躺在书架上供每日瞻仰使用。还是多写技术文章吧，于是便回来继续填坑。新版本出了并不代表老版本就没有价值了，我想只有充分了解了老版本才能更好的体会新版本，于是乎欣然继续分析v0.12.7。温习一下git命令，大神略过。 % git checkout v0.12.7 想说Hello不容易 上回书说到，Node.js已经摆好姿势，“’","text":"填坑 上一篇文章留了个扣子，本来不想继续写的，因为这样写实在是又累又耗时间。而且中间Node.js还发布了v4.0.0版本，一下子没动力了有木有，人家v4.0.0都发布了，我还分析v0.12.7干吗？于是便在这段时间写了两篇自我感觉良好的小文，奈何文笔太差，完全没人看。倍受打击之余，默默的在多看上买了一套《诺贝尔文学奖作品典藏书系（共28册）》，至今还躺在书架上供每日瞻仰使用。还是多写技术文章吧，于是便回来继续填坑。 新版本出了并不代表老版本就没有价值了，我想只有充分了解了老版本才能更好的体会新版本，于是乎欣然继续分析v0.12.7。温习一下git命令，大神略过。 % git checkout v0.12.7 想说Hello不容易 上回书说到，Node.js已经摆好姿势，“’Hello World”已经含在嘴里，伺机待发，但是有句歌词是这么唱的“让我怎么说出口……”，充分体现了这种状态，真是不简单。看了代码之后，充分被Node.js秀了一把继承和异步，一个乱字已然无法形容，所以必须先做几点温馨提示。 首先最好先重新温习一下网络方面的知识，百度一下TCP/IP、HTTP、Socket、Stream，随便翻翻前几页，有个大概了解就行，要不有些东西真的理解不了。 其次要了解一下相关类的继承关系，撇开多继承，这种程度的继承关系在Java里不算复杂，在IDE里也非常容易查看，但是放到JavaScript里只能用一坨来形容，不梳理出来一定会陷入其中。 然后一定要按照之前提到的方法，把V8和Debug日志全部打开，对比日志逐行分析代码，这样分析起来会事半功倍。 最后就是去触发一下程序，毕竟人家已经listen了这么久。这里不推荐浏览器，因为在地址栏里直接输入请求地址会有个问题，浏览器会默认先请求favicon.ico，这样日志里会出现大量的干扰，不利于分析。我在这里被坑了半天之后，不由哼出了周董的旋律，“快使用命令行！轻松！愉快！” % curl http:&#x2F;&#x2F;127.0.0.1:1337&#x2F; SayHello 连接过程 图中有一个细节需要注意，左上角的第一个调用是空心箭头-&gt;，这代表了异步调用，我们真正开始接触异步代码了。等等，为什么EventEmitter.emit()是普通的实心箭头？没错，他确实只是一个同步调用。我一直以为他是一个Node.js经典的异步操作，OMG，我居然被自己骗了这么长时间。以我目前阅读的代码和日志来看，好像只有libuv和process.nextTick()发起的调用是异步的，特此说明。 代码是如何从libuv到C++再到Node.js的呢？ tcp_wrap.cc中有如下代码 void TCPWrap::Initialize(Handle&lt;Object&gt; target, Handle&lt;Value&gt; unused, Handle&lt;Context&gt; context) &#123;... t-&gt;InstanceTemplate()-&gt;Set(String::NewFromUtf8(env-&gt;isolate(), &quot;onconnection&quot;), Null(env-&gt;isolate()));...&#125; void TCPWrap::Listen(const FunctionCallbackInfo&lt;Value&gt;&amp; args) &#123;... int err &#x3D; uv_listen(reinterpret_cast&lt;uv_stream_t*&gt;(&amp;wrap-&gt;handle_), backlog, OnConnection); args.GetReturnValue().Set(err);&#125; void TCPWrap::OnConnection(uv_stream_t* handle, int status) &#123; ... tcp_wrap-&gt;MakeCallback(env-&gt;onconnection_string(), ARRAY_SIZE(argv), argv);&#125; env.h中有如下代码 #define PER_ISOLATE_STRING_PROPERTIES(V) \\... V(onconnection_string, &quot;onconnection&quot;) \\... net.js中有如下代码 Server.prototype._listen2 &#x3D; function(address, port, addressType, backlog, fd) &#123;... self._handle.onconnection &#x3D; onconnection;...&#125; function onconnection(err, clientHandle) &#123;...&#125; 简单说就是tcp_wrap.cc在用V8定义JS对象TCP的时候定义了onconnection属性，并且在调用uv_listen的时候设置了OnConnection回调，而在OnConnection的最后会调用onconnection属性所设置的方法，最后net.js设置了这个属性为onconnection方法。 请求处理响应过程 图中小人形状代表第三方库deps/uv和deps/http_parser。图SayHello2-1和图SayHello2-2其实是一次同步顺序调用，画不开了才分成两个，也就是说图SayHello2-1右边的小人和图SayHello2-2左边的小人其实是一个人。 仔细看，http_parser竟然是个同步库，再一次纠正了我先入为主的认识——Node.js全身都是异步的。Node.js以异步闻名于江湖没错，但是要加上个主语——I/O，异步I/O才是其必杀技。回想一下跟他过招的这么长时间里，好像确实是异步多发于I/O。 看了这两张图，欣喜的发现，“Hello World”终于脱口而出了，可喜可贺~ 善后过程此时并没有完，如果将时间静止于此，命令行里应该已经显示出了“Hello world”，但是程序还没有退出。后面还要干什么呢，大概跟吃完饭要刷碗，说完话嘴不能一直张着类似。再次恢复时间的流动，又会哗哗哗的输出一大堆日志，仔细查看可知，其实是在还前面的债，统统的异步回调。前面的时序图基本都忽略了异步调用，是故意的，因为实在没有找到办法和地方把他们画出来。 还好剩下的东西不多了，而且也有一些窍门。重新查看前面两个流程的代码，把C++中调用uv_xxx并且设置了回调的方法记下来，把JS中process.nextTick()的调用记下来。V8的日志中一段完整的调用总是有以下形式。 1: xxx &#123;2: xxx &#123; 3: xxx &#123;...3: &#125; -&gt; xxx2: &#125; -&gt; xxx1: &#125; -&gt; xxx 所以把前面记录下来的方法调用和V8日志里为1:的段落进行对比，肯定能一一对上的，这里就不详细说明了。但是V8日志我没有收集全，最后面一段莫名其妙的就没了，不知道为什么。 回顾 回想源码分析过程，异常痛苦，只是用着Sublime Text的基本功能，翻来翻去，跳来跳去，虽然他的基本功能已经很强大了，但是还是感觉效率低下。“工欲善其事必先利其器”，还是应该把环境弄得高效趁手一些。工具放一边，其实不能随心所欲Debug源码才是硬伤，否则就不用假装有时间机器了，也许是被Java宠坏了，落差巨大。不过我想Node.js的核心开发人员不可能像我这么费劲，所以这方面还需要进一步了解。虽然重新认识了Node.js的异步，初步了解了其幕后英雄libuv和V8的机制，体系结构更加清晰明了，但是底层细节还是需要深入研究。","categories":[{"name":"技术","slug":"技术","permalink":"http://guowensheng.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://guowensheng.com/tags/Node-js/"}]},{"title":"为什么努力工作？","slug":"2015-10-20-why-work-hard","date":"2015-10-20T06:40:54.000Z","updated":"2020-03-20T13:09:26.924Z","comments":true,"path":"posts/2015-10-20-why-work-hard/","link":"","permalink":"http://guowensheng.com/posts/2015-10-20-why-work-hard/","excerpt":"工作是为了生存，无可厚非，但如果只是为了生存，那根本没必要努力工作，根据马斯洛需求层次理论，努力工作必然是有目的的。了解到这一点，并且加以运用，无论对企业的管理者还是员工都会有很大的帮助，许多问题都能迎刃而解。 金钱 99.99%的人都会想到钱，没错，大多数努力工作的人都是为了能有更好的收入，所以钱能解决大多数的问题。但同样的钱在哪挣都是挣，也许别的地方的工作会更有意思，所以到一定阶段光靠钱已经不行了。为了解决这个问题，现在股份期权越来越流行，这样能让人感觉自己是在给自己打工，给人一种归属感和主人翁意识，让人感觉在这里努力工作跟在别的地方不一样。但说白了股份期权也是钱，而且这个钱什么时候能拿到多少还不能确定，但正是因为这个不确定性，使他有时候就是比钱好使。这不禁让我想到了赌博，想到了人性的","text":"工作是为了生存，无可厚非，但如果只是为了生存，那根本没必要努力工作，根据马斯洛需求层次理论，努力工作必然是有目的的。了解到这一点，并且加以运用，无论对企业的管理者还是员工都会有很大的帮助，许多问题都能迎刃而解。 金钱99.99%的人都会想到钱，没错，大多数努力工作的人都是为了能有更好的收入，所以钱能解决大多数的问题。但同样的钱在哪挣都是挣，也许别的地方的工作会更有意思，所以到一定阶段光靠钱已经不行了。为了解决这个问题，现在股份期权越来越流行，这样能让人感觉自己是在给自己打工，给人一种归属感和主人翁意识，让人感觉在这里努力工作跟在别的地方不一样。但说白了股份期权也是钱，而且这个钱什么时候能拿到多少还不能确定，但正是因为这个不确定性，使他有时候就是比钱好使。这不禁让我想到了赌博，想到了人性的贪婪。 权力权利对于人的诱惑是巨大的，不用具体说明，去看看纸牌屋就知道了，对于权力的渴望与追逐，不只在官场，在公司也是一样的。 成长人多多少少都会对自己有些要求，所以在职业生涯的某些阶段，会把自身成长放在第一位，为自己制定一个目标，使自身的能力达到某种程度，而刚好所从事的工作与这个目标相符合的时候，努力工作就变得顺理成章了。 环境提到环境第一反应就是Google那近乎奢华的办公环境，那应该是无数人的梦想，人们会为之而努力工作，但真正拥有了之后呢，好像又没有了努力的理由。所以不要被假象蒙蔽，再好的物质环境也无法让人努力工作，相反可能会让人变得更加懈怠。我们这里要说的是精神环境，特指周围的人所带来的影响。试想把一流的人才都放在周围，根本不用去找理由找目标，努力工作会变得不由自主，持续的被周围的人所带动，根本停不下来。当然还有个前提条件，相互认同，要不可能起到反效果。 理想理想是个很神奇的东西，大多数情况下只是停留在想的阶段，真正为他付诸行动的人少之又少，或者说必须得有了一定的基础之后才会去考虑理想。但是理想的力量是强大的，世界的进步可能都要归功于人类的理想，努力工作在他面前只不过是小菜一碟。 对于企业管理者来说，都想让员工努力工作，都想留住优秀的员工，那么你们需要好好想想，你能够为员工提供什么？ 对于员工来说，都想要一份理想的工作，那么你同样需要好好想想，你希望从工作中得到什么？ 这些都想明白了，也就没什么可迷惑的了，剩下的就只有努力工作了。","categories":[{"name":"思考","slug":"思考","permalink":"http://guowensheng.com/categories/%E6%80%9D%E8%80%83/"}],"tags":[{"name":"工作","slug":"工作","permalink":"http://guowensheng.com/tags/%E5%B7%A5%E4%BD%9C/"}]},{"title":"你活在几维？","slug":"2015-09-06-which-dimension-do-you-live-in","date":"2015-09-06T08:28:17.000Z","updated":"2020-03-20T13:09:26.924Z","comments":true,"path":"posts/2015-09-06-which-dimension-do-you-live-in/","link":"","permalink":"http://guowensheng.com/posts/2015-09-06-which-dimension-do-you-live-in/","excerpt":"维度思考 初中学习平面几何，高中学习立体几何，让我们对维度有了初步的认识，一维是线，二维是面，三维便有了空间。至于四维是什么，有人说是时间，勉强可以理解。再往高维走呢？网上有个视频叫做“从一维空间到十二维空间”，有兴趣的可以研究一下，反正我是放弃了。 这里不得不提到《三体》，里面对于维度的描述简直令人震撼，印象最深刻的一幕就是太阳系遭受降维攻击而最终毁灭。虽然《三体》并没有详细叙述高维到底是个什么概念，但是他却让我认识到了什么是维度差异。低维无法理解高维，高维对低维一清二楚。 前段时间看了一篇文章你的努力程度之低，根本轮不到拼天赋，文章多次提到了所谓的维度，与之前的认识产生了共鸣，使我开始思考人生的维度。高维的人生是什么样子，我并不知道，因为本身生活在低维，但是我深切的意识到了人生","text":"维度思考 初中学习平面几何，高中学习立体几何，让我们对维度有了初步的认识，一维是线，二维是面，三维便有了空间。至于四维是什么，有人说是时间，勉强可以理解。再往高维走呢？网上有个视频叫做“从一维空间到十二维空间”，有兴趣的可以研究一下，反正我是放弃了。 这里不得不提到《三体》，里面对于维度的描述简直令人震撼，印象最深刻的一幕就是太阳系遭受降维攻击而最终毁灭。虽然《三体》并没有详细叙述高维到底是个什么概念，但是他却让我认识到了什么是维度差异。低维无法理解高维，高维对低维一清二楚。 前段时间看了一篇文章你的努力程度之低，根本轮不到拼天赋，文章多次提到了所谓的维度，与之前的认识产生了共鸣，使我开始思考人生的维度。高维的人生是什么样子，我并不知道，因为本身生活在低维，但是我深切的意识到了人生维度的差异，这一点很重要，这让我开始思考以前从没有思考过的东西，有了一些体会。 比如，对于小孩子的一举一动我们都了如指掌，但是小孩子却很难理解我们的行为举止，因为小孩子生活在低维，而我们生活在高维，这种维度差造成了理解上的鸿沟。但是随着小孩子的成长这种维度差逐渐缩小甚至被抹平，然后渐渐的我们老了，小孩子长大了，维度差又会出现反转。但是如果一个人积极接受新鲜事物，持续学习，一直保持一颗进取的心，那么即使他老了，也难以被后来人超越。从这个简单的例子我们可以推断出维度差无处不在，并且可以后天改变。所以从广义上讲任何认知上的差异都可以用维度差来解释，只不过有的大，有的小，有的你在乎，有的你不在乎。 我刚毕业的时候，进入一家日企工作，做对日外包。前两三年，学技术、学日语、学管理，进步飞快。但是慢慢的我发现，可学的东西越来越少，前进的脚步几乎停滞，职业发展轨迹清晰可预测。可见的未来不是我想要的，于是我决定跳出对日外包圈子。现在我更加确定那是一个低维空间，从中逃脱出来是正确的选择。提到换工作，不得不说说现在一个非常普遍的现象。在“互联网+”浪潮的推动下，程序员市场需求量很大，有些人趁着这波行情，在各种公司跳来跳去，工作内容没什么变化，能力没什么提升，工资却节节攀升。这样的后果就是被短期利益迷惑了双眼，自认为走在通向高维的路上，但实际上还是在低维打转。随着时间的推移认可你能力的人越来越少，而你又舍不得高薪的诱惑，不愿做出改变，就好像米缸里的老鼠，结果显而易见。所以一定要避免陷入低维陷阱。 看到这肯定有人会说，“凭什么你就在高维，别人都在低维？”这一点确实，每个人的人生观价值观不同，你可以这么认为别人，别人也可以这么认为你，所以没有绝对的高维与低维之分，维度差只存在于自己的心中。 如何升维 身处低维的我们，如何走高维？我想这将是个永恒的命题，是值得一生追求的目标，可能永远也找不到答案。当我以这样的目标审视自己，发现自己确实有很多低维的问题，只有摆脱了他们才能保证自己在通往高维的路上快速前行。 我删除了所有的游戏，因为这样可以节省很多时间。我开始加大阅读量，养成每天读书的习惯，因为只有知识能给我指明方向。我开始写更多的文章，因为这样可以加深我的思考并把它传递给别人。我在需要专心做事的时候远离手机，因为这样可以避免毫无意义的打扰。我开始走出自己的舒适区，接触一些以前不愿意接触的事情，因为只有这样才能成长。我不再为一些小人和小事而烦恼，只需心里默念一句“随风而去吧，低维的小虫子！”我逐渐开始健身，因为我认为一身低维的肥肉无法匹配高维的灵魂。 这样就够了吗？先做好这些吧！ 你生活在几维 请不要在意标题，只是为了吸引人看而已：）","categories":[{"name":"思考","slug":"思考","permalink":"http://guowensheng.com/categories/%E6%80%9D%E8%80%83/"}],"tags":[{"name":"生活","slug":"生活","permalink":"http://guowensheng.com/tags/%E7%94%9F%E6%B4%BB/"}]},{"title":"Node.js之HelloWorld背后的大坑","slug":"2015-08-21-the-big-pit-behind-nodejs-hello-world","date":"2015-08-21T09:08:07.000Z","updated":"2020-03-20T13:09:26.924Z","comments":true,"path":"posts/2015-08-21-the-big-pit-behind-nodejs-hello-world/","link":"","permalink":"http://guowensheng.com/posts/2015-08-21-the-big-pit-behind-nodejs-hello-world/","excerpt":"入坑 先贴一段代码，再熟悉不过，她默默的待在Node.js官方首页上已经不知多长时间，迎接着初入Node.js世界的程序员们，所有人都认识她，但并非所有人都了解她，甚至很多人都没有想过要去了解她。 var http = require('http'); http.createServer(function (req, res) { res.writeHead(200, {'Content-Type': 'text/plain'}); res.end('Hello World\\n'); }).listen(1337, '127.0.0.1'); console.log('Server running at http://127.0.0.1:1337/'); % node e","text":"入坑 先贴一段代码，再熟悉不过，她默默的待在Node.js官方首页上已经不知多长时间，迎接着初入Node.js世界的程序员们，所有人都认识她，但并非所有人都了解她，甚至很多人都没有想过要去了解她。 var http &#x3D; require(&#39;http&#39;);http.createServer(function (req, res) &#123; res.writeHead(200, &#123;&#39;Content-Type&#39;: &#39;text&#x2F;plain&#39;&#125;); res.end(&#39;Hello World\\n&#39;);&#125;).listen(1337, &#39;127.0.0.1&#39;);console.log(&#39;Server running at http:&#x2F;&#x2F;127.0.0.1:1337&#x2F;&#39;); % node example.jsServer running at http:&#x2F;&#x2F;127.0.0.1:1337&#x2F; 我也是很多认识但不了解她的人们的其中之一，为什么我会想要去了解她呢，其实事情是这样的。之前用PM2设置集群的时候很容易，一条命令就搞定了，当时感觉很神奇，于是便看了下官网上关于集群的文档，但是Sample代码实在非常怪异，完全不是正常的思路，便越发想了解一下Node.js的集群机制到底是如何实现的，看源码吧，遂入坑，卒！先看cluster.js，然后看child_process.js，最后看net.js，为什么最后是net.js，因为实在看不下去了，各种异步，东一榔头西一棒子，完全理不清头绪。总结一下失败原因，首先并不了解Node.js代码结构、实现方式和内部机制，不适应异步逻辑，一直以顺序的思路去看代码，导致很多地方看不明白。其次对JavaScript其实并不熟悉，尤其这种大型项目，一些高级特性的使用，所谓的对象和继承等等，相比自己之前写的那些业务代码，完全不属于一个次元。然后就是轻敌，单枪匹马杀入乱军之中，没有赵子龙那样的本事，不卒才怪。于是痛定思痛，还是从头开始学吧！ 体系架构 Node.js主要分为四大部分，Node Standard Library，Node Bindings，V8，Libuv，架构图如下。 Node Standard Library 是我们每天都在用的标准库，如require(&#39;http&#39;)，官方的API文档说的就是他。 Node Bindings 是沟通上下层的桥梁，封装V8和Libuv的细节，向上层提供基础功能。 V8 是Google开发的JavaScript引擎，提供JavaScript运行环境，可以说没有他就没有Node.js。 Libuv 是专门为Node.js开发的一个封装库，提供跨平台的异步I/O能力。 代码结构 以下是代码的简易结构，已经囊括了Node.js的四大部分，对于入门来说已经足够了，并且本文分析的绝大部分代码都在lib和src下面。另外，本文是基于v0.12.7版本进行的代码分析，网上也有一些老版本的分析，好像完全说的不是一回事，由于一时没注意带来了很多困扰，特此说明。 node ├─deps│ ├─uv│ └─v8├─lib (Node Standard Library)└─src (Node Bindings) 特别声明 后文只着重描述了看代码的思路，并没有进行过多的说明，一是表达能力有限，二是感觉任何的说明都显得苍白无力，所以光看文章不看代码是不行的！ 下面以Linus Torvalds的一句名言来开启Node.js的源码之旅。 Talk is cheap, show me the code. Let’s go！ 起步停车 本来我刚开始分析的是第二句代码http.createServer(...).listen(...);，因为这句最长，一看就是重点嘛，但是分析完之后才发现，在这之前Node.js还做了好多好多事情，这才只是冰山一角，还是需要从真正的起跑线开始。 % node example.js 这句话有啥可分析的，一开始确实是这样想的，本来认为可以轻松越过的，谁知道刚起步就停了下来，真的没有那么简单，如下图所示。首先声明这不是正规的时序图，只是为了更好的理解代码才画成了时序图的样子，来描述整个代码的调用过程。上图描述了从command line到进入example.js之前的程序调用过程，属于整个HelloWorld程序的起步阶段。要想了解进入主程序之前Node.js都干了什么，细读这部分代码就可以了，尤其是node.cc、node.js和module.js。其中node_Contextify.cc中有很多关于V8的调用，暂时不在本文的讨论范围，有兴趣的可以了解一下。 Node Bindings 其实上一节还留有一个疑点，上图右边第三个Script是怎么来的，是如何与C++代码联系上的？接着看代码！ vm.js中有如下调用，process.binding干了什么？ var binding &#x3D; process.binding(&#39;contextify&#39;);var Script &#x3D; binding.ContextifyScript; node.cc的SetupProcessObject中有如下设置，将process.binding与Binding进行绑定，Binding干了什么？ NODE_SET_METHOD(process, &quot;binding&quot;, Binding); node.cc的Binding中有如下调用，对模块进行注册，nm_context_register_func干了什么？ mod-&gt;nm_context_register_func(exports, unused, env-&gt;context(), mod-&gt;nm_priv); node.h中对mod的类型node_module有如下定义，往下看！ struct node_module &#123; int nm_version; unsigned int nm_flags; void* nm_dso_handle; const char* nm_filename; node::addon_register_func nm_register_func; node::addon_context_register_func nm_context_register_func; const char* nm_modname; void* nm_priv; struct node_module* nm_link;&#125;; node.h中还有如下宏定义，接着往下看！ #define NODE_MODULE_CONTEXT_AWARE_X(modname, regfunc, priv, flags) \\ extern &quot;C&quot; &#123; \\ static node::node_module _module &#x3D; \\ &#123; \\ NODE_MODULE_VERSION, \\ flags, \\ NULL, \\ __FILE__, \\ NULL, \\ (node::addon_context_register_func) (regfunc), \\ NODE_STRINGIFY(modname), \\ priv, \\ NULL \\ &#125;; \\ NODE_C_CTOR(_register_ ## modname) &#123; \\ node_module_register(&amp;_module); \\ &#125; \\ &#125;#define NODE_MODULE_CONTEXT_AWARE_BUILTIN(modname, regfunc) \\ NODE_MODULE_CONTEXT_AWARE_X(modname, regfunc, NULL, NM_F_BUILTIN) \\ node_contextify.cc中有如下宏调用，终于看清楚了！结合前面几点，实际上就是把node_module的nm_context_register_func与node::InitContextify进行了绑定。 NODE_MODULE_CONTEXT_AWARE_BUILTIN(contextify, node::InitContextify); 兜了这么大一个圈子，省略去中间步骤，代码对应如下，Node.js就是如此完成了Node Bindings。 process.binding(&#39;contextify&#39;); ↓↓↓NODE_MODULE_CONTEXT_AWARE_BUILTIN(contextify, node::InitContextify); 步入正轨一 说了这么多终于到第一句代码了，再不到就要放弃了，赶快来看看吧。 var http &#x3D; require(&#39;http&#39;); require是怎么来的，为什么平白无故就能用呢，实际上都干了些什么？ module.js的_compile中有如下代码。 var self &#x3D; this;...function require(path) &#123; return self.require(path);&#125;...var wrapper &#x3D; Module.wrap(content);...var compiledWrapper &#x3D; runInThisContext(wrapper, &#123; filename: filename &#125;);...var args &#x3D; [self.exports, require, self, filename, dirname];return compiledWrapper.apply(self.exports, args); Module的require有如下定义。 Module.prototype.require &#x3D; function(path) &#123; assert(path, &#39;missing path&#39;); assert(util.isString(path), &#39;path must be a string&#39;); return Module._load(path, this);&#125;; Module的wrap有如下定义。 Module.wrap &#x3D; NativeModule.wrap; node.js中NavtiveModule有如下定义。 NativeModule.wrap &#x3D; function(script) &#123; return NativeModule.wrapper[0] + script + NativeModule.wrapper[1];&#125;;NativeModule.wrapper &#x3D; [ &#39;(function (exports, require, module, __filename, __dirname) &#123; &#39;, &#39;\\n&#125;);&#39;]; 不用多解释了，代码已经说明了一切。 步入正轨二 正餐开始，不过感觉前面的开胃菜似乎有点多…… http.createServer(function (req, res) &#123; res.writeHead(200, &#123;&#39;Content-Type&#39;: &#39;text&#x2F;plain&#39;&#125;); res.end(&#39;Hello World\\n&#39;);&#125;).listen(1337, &#39;127.0.0.1&#39;); 一如既往，看图说话。 首先了解一下HTTP Server的继承关系，有利于更好的理解代码。 然后就是HTTP Server的工作流程。 通过上图可以看出，绝大部分逻辑都在net.js中，细读这部分代码可以更好的了解其工作原理。其中tcp_warp.cc中有很多关于Libuv的调用，暂时不在本文的讨论范围，有兴趣的可以了解一下。 步入正轨三 最后一句了，挺住！ console.log(&#39;Server running at http:&#x2F;&#x2F;127.0.0.1:1337&#x2F;&#39;); console和require还不一样，不是以参数的形式传进来的，这就要说到global对象了，Node.js的顶层对象。官方文档已经有了相关的说明，在这就不多做解释，重点看看他是怎么来的。 node.js中有如下定义，这个this到底是谁？ this.global &#x3D; this;...startup.globalVariables &#x3D; function() &#123; global.process &#x3D; process; global.global &#x3D; global; global.GLOBAL &#x3D; global; global.root &#x3D; global; global.Buffer &#x3D; NativeModule.require(&#39;buffer&#39;).Buffer; process.domain &#x3D; null; process._exiting &#x3D; false;&#125;;...startup.globalConsole &#x3D; function() &#123; global.__defineGetter__(&#39;console&#39;, function() &#123; return NativeModule.require(&#39;console&#39;); &#125;);&#125;; node.cc中的LoadEnvironment有如下定义，f代表node.js所形成的方法，Call跟JavaScript中的Function.prototype.call是一个意思，也就是说f中的this指向的就是global。 Local&lt;Object&gt; global &#x3D; env-&gt;context()-&gt;Global();Local&lt;Value&gt; arg &#x3D; env-&gt;process_object();f-&gt;Call(global, 1, &amp;arg); 这样console作为全局变量的身份也就真相大白了。 大功告成？ 所有代码都分析完了，“Hello World”这两个字竟然还没有出现！？这是段服务端程序，没有请求，哪来的应答！？哎，你要是长这样该多好…… console.log(&#39;Hello World&#39;); 即使没完，也准备告一段落了。给有缘人一个探索的空间？No！No！No！累了，需要恢复元气！如果确实非常想知道后事如何，那便在此留下一些线索，以供参考。 其实在看代码的过程中，Server响应请求的过程更加令人匪夷所思，卡了好久，还好找到了比较好的办法才算弄清楚，那就是看！日！志！其实看日志根本不算什么办法，地球人都知道，但是怎么让日志打出来，还真费了半天功夫，反正百度上是没找到。 V8日志 % node --trace example.js 源码Debug日志 % NODE_DEBUG&#x3D;HTTP,STREAM,MODULE,NET node example.js 关于V8的一些参数可以通过node --v8-options查看，--trace的作用是输出方法调用过程。源码Debug日志的原理可以查看util.js的debuglog方法。这些日志都比较长，最好输出到文件中以便反复查看。 感想 别总以为什么都知道，其实可能连最基本的都不知道！知道的越多，就越觉得无知！唯有学习！","categories":[{"name":"技术","slug":"技术","permalink":"http://guowensheng.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://guowensheng.com/tags/Node-js/"}]},{"title":"Saving Private ES","slug":"2015-04-08-saving-private-es","date":"2015-04-08T08:46:10.000Z","updated":"2020-02-27T12:55:28.326Z","comments":true,"path":"posts/2015-04-08-saving-private-es/","link":"","permalink":"http://guowensheng.com/posts/2015-04-08-saving-private-es/","excerpt":"思想斗争 上一篇文章提到要拯救年迈的伙伴ES，但是如果只是搭建开发环境的话貌似并没有救活，只是保留了生的希望，要想让他重新焕发青春还得从基础入手——更新技术栈！这话说起来容易，可是仔细想想，更新技术栈都需要做什么呢？运行环境Node.js和Redis更新到最新版本，项目所有的依赖库更新到最新版本，保证更新后的程序正确运行。哎妈，这么多事情，还不能出错，没有两周估计做不完，然后就有点退缩了，脑子里反复盘算着两周做这事值不值？自己做事情往往就是这样，开始先习惯性的考虑一堆不利因素，然后把自己吓到了，再然后就没有然后了 。其实在想要做一件事的时候，先考虑不利因素不是问题，但是仅仅考虑不利因素而不考虑解决办法才是问题，而且有些问题并不像看上去那么困难。及时跳出思维怪圈之后，开始冷静分析。首先是","text":"思想斗争 上一篇文章提到要拯救年迈的伙伴ES，但是如果只是搭建开发环境的话貌似并没有救活，只是保留了生的希望，要想让他重新焕发青春还得从基础入手——更新技术栈！这话说起来容易，可是仔细想想，更新技术栈都需要做什么呢？运行环境Node.js和Redis更新到最新版本，项目所有的依赖库更新到最新版本，保证更新后的程序正确运行。哎妈，这么多事情，还不能出错，没有两周估计做不完，然后就有点退缩了，脑子里反复盘算着两周做这事值不值？自己做事情往往就是这样，开始先习惯性的考虑一堆不利因素，然后把自己吓到了，再然后就没有然后了 。其实在想要做一件事的时候，先考虑不利因素不是问题，但是仅仅考虑不利因素而不考虑解决办法才是问题，而且有些问题并不像看上去那么困难。 及时跳出思维怪圈之后，开始冷静分析。首先是升级运行环境，好像在之前研究的基础上用Docker很容易。然后是升级依赖库，大概扫了一眼依赖库的更新履历，貌似变化不大。最后是保证程序的正确性，之前研究Node.js单元测试时，用ES做的实验，已经写了完整并且正确的测试代码。恩，第一印象确实不靠谱，差不多可以开始动手了。 先跑起来再说 用敏捷的思维来做这件事，先设定一个比较低的目标——跑起来，尽快验证其可行性，后面的事情顺水推舟逐步完善就可以了。于是选择了我认为最快的方式，在机器（Windows）上安装最新的Node.js 0.12.2，在Boot2Docker中启动最新的Redis 2.8.19容器，修改package.json如下。before: &quot;dependencies&quot; : &#123; &quot;express&quot; : &quot;3.1.0&quot;, &quot;redis&quot; : &quot;0.8.2&quot;, &quot;underscore&quot; : &quot;1.4.4&quot;, &quot;log4js&quot; : &quot;0.5.6&quot;&#125;,&quot;engines&quot; : &#123; &quot;node&quot; : &quot;0.6.19&quot;&#125; after: &quot;dependencies&quot; : &#123; &quot;express&quot; : &quot;4.12.0&quot;, &quot;redis&quot; : &quot;0.12.1&quot;, &quot;underscore&quot; : &quot;1.8.2&quot;, &quot;log4js&quot; : &quot;0.6.22&quot;&#125;,&quot;engines&quot; : &#123; &quot;node&quot; : &quot;0.12.2&quot;&#125;, 由于各依赖库的接口变更很小，代码只是稍作了修改。然后抱着先跑跑试试有错再改的心态运行了程序，启动居然没有报错，简单试了几个接口竟然也都运行正常，幸福来得太快，万里长征一个跟头翻过了一大半。 鸟枪换炮 单元测试2013年3月折腾Node.js单元测试，当时ES的测试依赖如下，另外用jscoverage做覆盖率统计，再写个Makefile把相关命令封装一下，这样算是当时比较主流的做法。 &quot;devDependencies&quot; : &#123; &quot;mocha&quot; : &quot;*&quot;, &quot;sandboxed-module&quot; : &quot;*&quot;, &quot;should&quot; : &quot;*&quot;, &quot;supertest&quot; : &quot;*&quot;, &quot;sinon&quot; : &quot;*&quot;&#125;, 但是这种做法还是有一些问题的：首先对require的mock做的不好，当时没有特别合适的第三方库，sandboxed-module也是无奈之选，额外还需要写一些代码对其进行弥补。其次jscoverage不是Node.js的模块，需要单独安装，只能在linux下运行，需要Makefile封装其复杂的命令。于是我又在Github上翻了翻，惊喜的发现了mockery和istanbul可以完美解决之前的问题，而且改动非常小，于是修改依赖如下。 &quot;devDependencies&quot; : &#123; &quot;mocha&quot; : &quot;2.1.0&quot;, &quot;mockery&quot; : &quot;1.4.0&quot;, &quot;should&quot; : &quot;3.3.2&quot;, &quot;supertest&quot; : &quot;0.15.0&quot;, &quot;sinon&quot; : &quot;1.12.2&quot;, &quot;istanbul&quot; : &quot;0.3.6&quot;&#125;, 在命令行下运行 set NODE_ENV&#x3D;testnode_modules\\.bin\\istanbul cover node_modules\\mocha\\bin\\_mocha 覆盖率信息生成在coverage目录下，通过coverage\\lcov-report\\index.html文件可直观查看。注意在Windows下istanbul和mocha联合使用的时候，用node_modules\\.bin\\_mocha是会报错的，必须用node_modules\\mocha\\bin\\_mocha，路径有少许差异，结果完全不同，因为粗心在这上浪费了些时间。单元测试和覆盖率都有了，但是运行方式很不舒服，要打那么长的命令，肯定有更好的方法。印象里好像npm命令能做点什么似的，于是翻阅了一下官方文档，在package.json中加入如下代码。 &quot;scripts&quot;: &#123; &quot;test&quot; : &quot;istanbul cover node_modules&#x2F;mocha&#x2F;bin&#x2F;_mocha&quot;&#125; 冗长的命令立刻简化为 npm test 运行部署ES的运行部署方式一直是个问题，当时一直也没有比较好的方式，代码复制4份，用forever分别启动做进程管理，前端用Nginx做反向代理，请求由Nginx平均分配给四个进程处理。这样做在部署的时候会非常麻烦，4份代码就意味着所有的工作都要做4次，每次项目升级都做得异常痛苦。Node.js有原生的Cluster模块，但是一直不是很成熟，所以一直还是用Nginx凑合着。Node.js v0.12对Cluster的调度算法做了修改，说是不会像以前那样出现非常不均衡的现象，应该可以一试了。PM2早就有所了解，功能上是forever的超集，既能做进程管理又能实现Cluster，监控界面也非常漂亮，关键是不用复制4份代码了，Nginx也可以去掉了，必须试一下，修改package.json如下。 &quot;scripts&quot;: &#123; &quot;start&quot; : &quot;pm2 start app.js -i 4&quot;, &quot;test&quot; : &quot;istanbul cover node_modules&#x2F;mocha&#x2F;bin&#x2F;_mocha&quot;&#125; 启动程序只需 npm start 当初还专门为了简化forever操作写了一个shell，封装各种命令，着实费了一番功夫，现在看来还是NPM大法好！ 程序运行起来之后想看看监控情况，于是pm2 monit，发现启动的4个进程在PM2的监控界面只显示一个，任务管理器里面也没有多个进程在运行的迹象，看文档也没找到相关的配置，百思不得其解。难道是Windows的问题，用Linux来试试吧，这时候再一次被Docker拯救于危难之中，直接下载Node.js的官方镜像运行就好了。结果在Linux下4个进程显示正常，哎，Windows果然不是亲生的…… 蓦然回首 回顾之前的工作，预期的目标全部达成，还改进了运行部署方式，整个过程只用了2天时间，比最开始预计的两周时间快了很多。除了之前充分的单元测试做了很好的铺垫之外，最主要的还是Docker节省了大量环境搭建的时间，虽然本文对Docker只是一带而过，但确实功不可没，赞！想想这次拯救行动的前因后果，用到的东西都是零零散散学习的，但相互之间又有着种种联系，如果不学Docker就不会去研究搭建开发环境，如果不研究搭建开发环境就不会想起拯救ES，如果之前没有用ES来研究单元测就不会这么顺利的完成试验证工作，如果没有一直关注Node.js就不会想到用NPM和PM2来改善程序的运行部署方式，冥冥之中好像必然会导致今天的结果，真是有趣！ 这个故事告诉我们，新东西得学啊，没准哪天就用上了，没准用上了就会改变世界，至少这次把工作方式给改变了。","categories":[{"name":"技术","slug":"技术","permalink":"http://guowensheng.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://guowensheng.com/tags/Node-js/"}]},{"title":"Node.js developmet environment with Vagrant and Docker","slug":"2015-03-09-nodejs-developmet-environment-with-vagrant-and-docker","date":"2015-03-19T06:57:52.000Z","updated":"2020-02-27T12:34:13.888Z","comments":true,"path":"posts/2015-03-09-nodejs-developmet-environment-with-vagrant-and-docker/","link":"","permalink":"http://guowensheng.com/posts/2015-03-09-nodejs-developmet-environment-with-vagrant-and-docker/","excerpt":"起因 * 平时用到的技术比较杂，java，node.js，python等，在一台机器上配置众多环境，导致本地环境混乱，技术切换总要瞻前顾后。 * 每一种技术的环境配置都比较繁琐，时间长了容易忘记，即使做了完善的记录，重新配置也会比较耗时，对新人不友好。 * 家里用mac，公司用windows，两个系统两套环境同样的工作，环境配置成了负担。 * 一直期望实现一种方式，无论在任何地方，只需敲几行命令，多复杂的应用都能跑起来，修改调试闲庭信步，技术切换波澜不惊，还不污染本地环境。 * Docker现在这么火，怎么能不试试。 选型 Vagrant and VM 挺久之前朋友推荐Vagrant，当时感觉惊为天人，竟然还可以这样，随即研究了一下，简单实现了在宿主机windows下","text":"起因 平时用到的技术比较杂，java，node.js，python等，在一台机器上配置众多环境，导致本地环境混乱，技术切换总要瞻前顾后。 每一种技术的环境配置都比较繁琐，时间长了容易忘记，即使做了完善的记录，重新配置也会比较耗时，对新人不友好。 家里用mac，公司用windows，两个系统两套环境同样的工作，环境配置成了负担。 一直期望实现一种方式，无论在任何地方，只需敲几行命令，多复杂的应用都能跑起来，修改调试闲庭信步，技术切换波澜不惊，还不污染本地环境。 Docker现在这么火，怎么能不试试。 选型 Vagrant and VM挺久之前朋友推荐Vagrant，当时感觉惊为天人，竟然还可以这样，随即研究了一下，简单实现了在宿主机windows下开发node.js程序，代码通过synced_folder实时同步到虚拟机linux下运行调试。遗憾的是虚拟机linux的环境完全是通过命令手动搭建的，并没有结合Puppet自动完成。其实Vagrant是完全可以实现终极目标的，没有进行下去的原因有三：一是因为要学习Puppet和一些服务器运维知识，当时感觉有点跨领域了。二是因为复杂的多VM的应用会占用比较多的资源，电脑不给力不行。三是因为懒惰！ Boot2docker本来一开始打算只用Boot2docker实现，因为不想引入额外技术，于是就开始干了。一开始都很顺利，dockerfile，image，container，link，run，应用按部就班的就运行起来了。但这样离终极目标还有一段距离，没有做到out of the box。首先build和run都需要手动执行，其中的一些参数不太好记。fig到是一个现成的解决方案，可是在windows上无法运行。其次目录同步支持的不好，无法提前配置，默认同步c:/User到/c/Users之外，如果想同步其他目录需要在boot2dockerVM里执行mount命令。整个过程需要手动干预过多，对新手不友好，不完美。 Vagrant and Docker其实网上有很多基于Vagrant的方案，一开始确实不想用，无奈Boot2docker不给力。通过Vagrant主要解决了两个问题，一是可以提前配置同步目录，指定代码实时同步目录，二是可以通过Vagrant配置实现fig的功能。Vagrant和Boot2docker两者都是在VirtualBox的中介linux虚拟机上运行Docker，性能差别应该不大。 Boot2docker探路 确定目标要研究一项技术最好的办法是用实际的项目去验证，于是我选了一个2012年用Node.js写的项目es，线上版本最后一次修改是在2013年2月。选择这个项目是因为，长时间没有升级导致技术栈版本比较低，再修改的话环境都不好搭建，而且这个项目是当年刚开始研究Node.js时写的，也算探索的一种延续，再挽救一下这个年迈的伙伴。于是乎把这次探索的目标定为用Docker一键式搭建es的开发环境。 任务分析es的技术栈是，CentOS 6.3，Node.js 0.6.19，Redis 2.4.15。从DockerHub上看，这几个项目已经找不到这么低版本的镜像了，Node.js可以通过nvm安装老版本，Redis可以通过tar包安装老版本，CentOS没办法只好选择了默认的centos6（当时版本6.6），当然也可以自己做一个6.3的镜像，太麻烦只好先忍了。后面需要做的就是，定义两个dockerfile，一个基于Node.js的app，一个基于Redis的db，构建image，运行container的时候link一下就OK了。 说干就干db/dockerfile FROM centos:centos6MAINTAINER guowsRUN yum -y updateRUN yum -y install gcc tclADD .&#x2F;redis&#x2F;redis-2.4.15.tar.gz &#x2F;tmp&#x2F;redis-2.4.15.tar.gzRUN cd &#x2F;tmp&#x2F;redis-2.4.15.tar.gz&#x2F;redis-2.4.15 &amp;&amp; \\ make &amp;&amp; \\ make installEXPOSE 6379CMD [&quot;redis-server&quot;] 构建镜像 docker build -t es-db . 运行容器 docker run --name db -d es-db 在构建db的过程中有几个需要注意的地方：ADD命令如果添加tar文件的话，会自动解压，这个比较令人费解。CMD命令执行的指令必须是前台运行的，否则container启动之后，执行完CMD后面的指令后会自动关闭。在运行容器的时候并没有用参数-p 6379:6379，因为如果用link连接容器的话，是不需要暴露端口的，这样会比较安全。 app/dockerfile FROM centos:centos6MAINTAINER guowsRUN yum -y updateRUN yum -y install tar gcc gcc-c++ openssl-develRUN curl https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;creationix&#x2F;nvm&#x2F;v0.20.0&#x2F;install.sh | bashRUN source ~&#x2F;.nvm&#x2F;nvm.sh &amp;&amp; \\ nvm install v0.6.19 &amp;&amp; \\ nvm use v0.6.19 &amp;&amp; \\ nvm alias default v0.6.19RUN ln -s ~&#x2F;.nvm&#x2F;v0.6.19&#x2F;bin&#x2F;node &#x2F;usr&#x2F;bin&#x2F;node &amp;&amp; \\ ln -s ~&#x2F;.nvm&#x2F;v0.6.19&#x2F;bin&#x2F;npm &#x2F;usr&#x2F;bin&#x2F;npmRUN npm config set ca&#x3D;&quot;&quot;RUN mkdir -p &#x2F;usr&#x2F;local&#x2F;esADD . &#x2F;usr&#x2F;local&#x2F;esWORKDIR &#x2F;usr&#x2F;local&#x2F;esRUN npm installCMD [&quot;node&quot;, &quot;app.js&quot;] 构建镜像 docker build -t es-app . 运行容器 docker run --name app --link db:db -p 9527:9527 -d es-app 在构建app的过程中有几个需要注意的地方：像nvm install这样会进行长时间的下载、编译和安装的命令，推荐单独放在一个RUN命令里，这样执行完成后会生成中间image进行缓存，方便dockerfile的调试，否则会浪费大量等待的时间。npm版本低，必须设置npm config set ca=&quot;&quot;。app如何知道db的ip和port，由于用了link的方式连接两个容器，Docker会在app里面以&lt;name&gt;_PORT_&lt;port&gt;_&lt;protocol&gt;为前缀生成一些环境变量，这里用到的是DB_PORT_6379_TCP_ADDR和DB_PORT_6379_TCP_PORT，于是在Node.js代码里可以通过process.env[&#39;...&#39;]的方式取得。在宿主机的命令行里用boot2docker ip可以取得boot2dockerVM的ip，然后就可以通过http://192.168.59.103:9527来测试应用了。 问题截止到目前算是有了一个阶段性成果，但是遇到了一些无法解决的问题，在前面的选型中已经提到。现在就好像刚爬上一座山峰，在眺望四周风景的时候发现这根本不是终点，甚至才刚刚开始，于是乎收拾收拾心情，继续爬向更高的山峰。 Vagrant and Docker再启程 确定目标在之前Boot2docker成果的基础上，通过Vagrant实现一键式构建，代码实时同步，开发调试轻松加愉快。 任务分析这种方式网上已经有不少，这篇Setting up a development environment using Docker and Vagrant是我参考最多的。 照猫画虎tree root │ DockerHostVagrantfile│ Vagrantfile├─app│ │ Dockerfile│ └─src│ app.js│ package.json└─db │ Dockerfile └─redis redis-2.4.15.tar.gz Vagrantfile ENV[&#39;VAGRANT_DEFAULT_PROVIDER&#39;] &#x3D; &#39;docker&#39;DOCKER_HOST_NAME &#x3D; &quot;dockerhost&quot;DOCKER_HOST_VAGRANTFILE &#x3D; &quot;.&#x2F;DockerHostVagrantfile&quot;Vagrant.configure(&quot;2&quot;) do |config| config.vm.define &quot;db&quot; do |a| a.vm.provider &quot;docker&quot; do |d| d.build_dir &#x3D; &quot;.&#x2F;db&#x2F;&quot; d.build_args &#x3D; [&quot;-t&#x3D;es-db&quot;] d.name &#x3D; &quot;es-db&quot; d.vagrant_machine &#x3D; &quot;#&#123;DOCKER_HOST_NAME&#125;&quot; d.vagrant_vagrantfile &#x3D; &quot;#&#123;DOCKER_HOST_VAGRANTFILE&#125;&quot; end end config.vm.define &quot;app-src&quot; do |a| a.vm.provider &quot;docker&quot; do |d| d.build_dir &#x3D; &quot;.&#x2F;app&#x2F;&quot; d.build_args &#x3D; [&quot;-t&#x3D;es-app&quot;] d.name &#x3D; &quot;es-app-src&quot; d.volumes &#x3D; [&quot;&#x2F;usr&#x2F;local&#x2F;es-vd&#x2F;app&#x2F;src:&#x2F;usr&#x2F;local&#x2F;es&quot;] d.cmd &#x3D; [&quot;npm&quot;, &quot;install&quot;] d.remains_running &#x3D; false d.vagrant_machine &#x3D; &quot;#&#123;DOCKER_HOST_NAME&#125;&quot; d.vagrant_vagrantfile &#x3D; &quot;#&#123;DOCKER_HOST_VAGRANTFILE&#125;&quot; end end config.vm.define &quot;app&quot; do |a| a.vm.provider &quot;docker&quot; do |d| d.image &#x3D; &quot;es-app&quot; d.create_args &#x3D; [&quot;--volumes-from&#x3D;es-app-src&quot;] d.name &#x3D; &quot;es-app&quot; d.ports &#x3D; [&quot;9527:9527&quot;] d.link(&quot;es-db:db&quot;) d.cmd &#x3D; [&quot;node&quot;, &quot;&#x2F;usr&#x2F;local&#x2F;es&#x2F;app.js&quot;] d.vagrant_machine &#x3D; &quot;#&#123;DOCKER_HOST_NAME&#125;&quot; d.vagrant_vagrantfile &#x3D; &quot;#&#123;DOCKER_HOST_VAGRANTFILE&#125;&quot; end endend DockerHostVagrantfile Vagrant.configure(&quot;2&quot;) do |config| config.vm.provision &quot;docker&quot; config.vm.provision &quot;shell&quot;, inline: &quot;ps aux | grep &#39;sshd:&#39; | awk &#39;&#123;print $2&#125;&#39; | xargs kill&quot; config.vm.define &quot;dockerhost&quot; config.vm.box &#x3D; &quot;ubuntu&#x2F;trusty64&quot; config.vm.synced_folder &quot;.&quot;, &quot;&#x2F;vagrant&quot;, disabled: true config.vm.synced_folder &quot;.&quot;, &quot;&#x2F;usr&#x2F;local&#x2F;es-vd&quot; config.vm.network &quot;forwarded_port&quot;, guest: 9527, host: 9527 config.vm.provider :virtualbox do |vb| vb.name &#x3D; &quot;dockerhost&quot; endend db/dockerfile FROM centos:centos6MAINTAINER guowsRUN yum -y updateRUN yum -y install gcc tclADD .&#x2F;redis&#x2F;redis-2.4.15.tar.gz &#x2F;tmp&#x2F;redis-2.4.15.tar.gzRUN cd &#x2F;tmp&#x2F;redis-2.4.15.tar.gz&#x2F;redis-2.4.15 &amp;&amp; \\ make &amp;&amp; \\ make installEXPOSE 6379CMD [&quot;redis-server&quot;] app/dockerfile FROM centos:centos6MAINTAINER guowsRUN yum -y updateRUN yum -y install tar gcc gcc-c++ openssl-develRUN curl https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;creationix&#x2F;nvm&#x2F;v0.20.0&#x2F;install.sh | bashRUN source ~&#x2F;.nvm&#x2F;nvm.sh &amp;&amp; \\ nvm install v0.6.19 &amp;&amp; \\ nvm use v0.6.19 &amp;&amp; \\ nvm alias default v0.6.19RUN ln -s ~&#x2F;.nvm&#x2F;v0.6.19&#x2F;bin&#x2F;node &#x2F;usr&#x2F;bin&#x2F;node &amp;&amp; \\ ln -s ~&#x2F;.nvm&#x2F;v0.6.19&#x2F;bin&#x2F;npm &#x2F;usr&#x2F;bin&#x2F;npmRUN npm config set ca&#x3D;&quot;&quot;RUN mkdir -p &#x2F;usr&#x2F;local&#x2F;esWORKDIR &#x2F;usr&#x2F;local&#x2F;es 这里面有一个让我纠结很久的问题，image里面应不应该放代码，因为我要做的是开发环境，代码和依赖都会随时变化，把一些必然会变的东西固化到image里面让人很不爽。代码和依赖不放在image里面的话，就必须从dockerfile里面分离出来，这样就涉及到代码放在哪依赖何时安装的问题。代码还好说，用synced_folder和volume可以搞定。但是依赖何时安装呢？起初想把npm install &amp;&amp; node app.js放在docker run后面，但是不成功，npm好像把后面的内容都当成了参数对待，无法安装。当然可以写一个shell，把好多东西都写在里面，但是这样又赋予了docker run太多的职责，而且每次启动都要重复执行一些命令，感觉与docker的思想相违背。解决这个问题的灵感来自于我之前提到的那篇文章和官方文档，首先创建一个名为es-app-src的container专门放置代码和依赖，通过-v同步代码，在此之上执行npm install，把代码和依赖都存在了es-app-src的volume里，再创建一个名为es-app的container通过--volumes-from挂载es-app-src的volume。 在实际操作过程中遇到三个问题：一是执行vagrant up时需要加上--no-parallel，因为Vagrant默认是并行执行的，但是由于需要--link，也就是说必须db起来了之后才能被app来link，所以必须顺序执行。二是npm install报错Error: UNKNOW , symlink &#39;...&#39;，因为npm install需要做symlink，同时通过synced_folder同步给宿主机，宿主机windows默认情况下是不允许symlink的，需要管理员权限，所以需要以管理员权限启动命令行。网上还有一种修改Vagrant配置的方案，我没有成功。三是由于es-app-src执行完必要的任务就会关闭，所以必须配置remains_running = false来告诉Vagrant这是正常现象，否则会报错。 通过以上步骤，只需一条vagrant up --no-parallel命令，然后稍作等待（时间取决于网络条件和机器配置），应用从无到有在本地就跑起来了，so easy！ 开发调试应用跑起来还不算完，开发调试怎么办，修改代码需要重启应用，Docker可没有这个功能，最后这一点实现不了，前面一切都是白搭。Node.js有一些第三方的进程管理库可以解决这个问题，能够实时监控代码变化并且实时重启应用，如forever、PM2、nodemon，但是只有forever可以支持Node.js 0.6.19，奈何那重启速度实在让人无法直视，谁让咱版本低呢。 package.json &quot;dependencies&quot; : &#123; ... &quot;forever&quot; : &quot;0.9.2&quot;&#125;,&quot;scripts&quot;: &#123; &quot;start&quot; : &quot;forever -w app.js&quot;&#125; Vagrantfile config.vm.define &quot;app&quot; do |a| a.vm.provider &quot;docker&quot; do |d| d.image &#x3D; &quot;es-app&quot; d.create_args &#x3D; [&quot;--volumes-from&#x3D;es-app-src&quot;] d.name &#x3D; &quot;es-app&quot; d.ports &#x3D; [&quot;9527:9527&quot;] d.link(&quot;es-db:db&quot;) d.cmd &#x3D; [&quot;npm&quot;, &quot;start&quot;] d.vagrant_machine &#x3D; &quot;#&#123;DOCKER_HOST_NAME&#125;&quot; d.vagrant_vagrantfile &#x3D; &quot;#&#123;DOCKER_HOST_VAGRANTFILE&#125;&quot; endend 问题现在的解决方案也不够完美，Vagrant和Docker配合起来总是有些奇怪的问题，网上资料不多，整个调试过程非常痛苦，而且和Fig相比也明显不够优雅，不过应该已经算是现阶段的最优解了，期待后续改进吧。 畅想未来 通过这次实践，对Docker的认识更进一步，算是从认知到入门了吧，着实颠覆了一下我的观念，太方便了，真的可以让开发调试轻松加愉快。而且Docker的能力绝对不止于此，开发、测试、部署、交付等等，软件生命周期的各个阶段都可以找到用武之地，想象空间无限，效率提升无限，期待把他应用到更多的工作场景中去！","categories":[{"name":"技术","slug":"技术","permalink":"http://guowensheng.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://guowensheng.com/tags/Node-js/"},{"name":"Docker","slug":"Docker","permalink":"http://guowensheng.com/tags/Docker/"},{"name":"Vagrant","slug":"Vagrant","permalink":"http://guowensheng.com/tags/Vagrant/"}]}],"categories":[{"name":"总结","slug":"总结","permalink":"http://guowensheng.com/categories/%E6%80%BB%E7%BB%93/"},{"name":"阅读","slug":"阅读","permalink":"http://guowensheng.com/categories/%E9%98%85%E8%AF%BB/"},{"name":"思考","slug":"思考","permalink":"http://guowensheng.com/categories/%E6%80%9D%E8%80%83/"},{"name":"技术","slug":"技术","permalink":"http://guowensheng.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"年终总结","slug":"年终总结","permalink":"http://guowensheng.com/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"},{"name":"书单","slug":"书单","permalink":"http://guowensheng.com/tags/%E4%B9%A6%E5%8D%95/"},{"name":"读书笔记","slug":"读书笔记","permalink":"http://guowensheng.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"name":"生活","slug":"生活","permalink":"http://guowensheng.com/tags/%E7%94%9F%E6%B4%BB/"},{"name":"社会","slug":"社会","permalink":"http://guowensheng.com/tags/%E7%A4%BE%E4%BC%9A/"},{"name":"教育","slug":"教育","permalink":"http://guowensheng.com/tags/%E6%95%99%E8%82%B2/"},{"name":"AI","slug":"AI","permalink":"http://guowensheng.com/tags/AI/"},{"name":"Cryptography","slug":"Cryptography","permalink":"http://guowensheng.com/tags/Cryptography/"},{"name":"Node.js","slug":"Node-js","permalink":"http://guowensheng.com/tags/Node-js/"},{"name":"libuv","slug":"libuv","permalink":"http://guowensheng.com/tags/libuv/"},{"name":"Async","slug":"Async","permalink":"http://guowensheng.com/tags/Async/"},{"name":"Encoding","slug":"Encoding","permalink":"http://guowensheng.com/tags/Encoding/"},{"name":"工作","slug":"工作","permalink":"http://guowensheng.com/tags/%E5%B7%A5%E4%BD%9C/"},{"name":"Docker","slug":"Docker","permalink":"http://guowensheng.com/tags/Docker/"},{"name":"GFW","slug":"GFW","permalink":"http://guowensheng.com/tags/GFW/"},{"name":"Vagrant","slug":"Vagrant","permalink":"http://guowensheng.com/tags/Vagrant/"}]}